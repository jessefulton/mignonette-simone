
simone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00000a74  00000b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800292  00800292  00000c9a  2**0
                  ALLOC
  3 .debug_aranges 00000028  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000337  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c51  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002eb  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c81  00000000  00000000  00001f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003da  00000000  00000000  00002bb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	bc c2       	rjmp	.+1400   	; 0x594 <__vector_13>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	2c c0       	rjmp	.+88     	; 0x7e <__bad_interrupt>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
  2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
  32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
  34:	fe c2       	rjmp	.+1532   	; 0x632 <__vector_13+0x9e>
  36:	04 c3       	rjmp	.+1544   	; 0x640 <__vector_13+0xac>
  38:	0a c3       	rjmp	.+1556   	; 0x64e <__vector_13+0xba>
  3a:	10 c3       	rjmp	.+1568   	; 0x65c <__vector_13+0xc8>
  3c:	16 c3       	rjmp	.+1580   	; 0x66a <__vector_13+0xd6>
  3e:	1c c3       	rjmp	.+1592   	; 0x678 <__vector_13+0xe4>
  40:	22 c3       	rjmp	.+1604   	; 0x686 <__vector_13+0xf2>
  42:	28 c3       	rjmp	.+1616   	; 0x694 <__vector_13+0x100>
  44:	2e c3       	rjmp	.+1628   	; 0x6a2 <__vector_13+0x10e>
  46:	ee c2       	rjmp	.+1500   	; 0x624 <__vector_13+0x90>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
  54:	12 e0       	ldi	r17, 0x02	; 2
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b1 e0       	ldi	r27, 0x01	; 1
  5a:	e4 e7       	ldi	r30, 0x74	; 116
  5c:	fa e0       	ldi	r31, 0x0A	; 10
  5e:	02 c0       	rjmp	.+4      	; 0x64 <.do_copy_data_start>

00000060 <.do_copy_data_loop>:
  60:	05 90       	lpm	r0, Z+
  62:	0d 92       	st	X+, r0

00000064 <.do_copy_data_start>:
  64:	a2 39       	cpi	r26, 0x92	; 146
  66:	b1 07       	cpc	r27, r17
  68:	d9 f7       	brne	.-10     	; 0x60 <.do_copy_data_loop>

0000006a <__do_clear_bss>:
  6a:	12 e0       	ldi	r17, 0x02	; 2
  6c:	a2 e9       	ldi	r26, 0x92	; 146
  6e:	b2 e0       	ldi	r27, 0x02	; 2
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	a8 3b       	cpi	r26, 0xB8	; 184
  76:	b1 07       	cpc	r27, r17
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	e9 d0       	rcall	.+466    	; 0x24e <main>
  7c:	fa c4       	rjmp	.+2548   	; 0xa72 <_exit>

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <delay_us>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  80:	98 2f       	mov	r25, r24
  82:	88 23       	and	r24, r24
  84:	49 f0       	breq	.+18     	; 0x98 <delay_us+0x18>
  86:	22 e0       	ldi	r18, 0x02	; 2
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	82 2f       	mov	r24, r18
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <delay_us+0x10>
  94:	91 50       	subi	r25, 0x01	; 1
  96:	d9 f7       	brne	.-10     	; 0x8e <delay_us+0xe>
  98:	08 95       	ret

0000009a <delay_ms>:
//
// crude delay of 1 to 255 ms
//
void
delay_ms(uint8_t ms)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 2f       	mov	r18, r24
  a0:	88 23       	and	r24, r24
  a2:	49 f0       	breq	.+18     	; 0xb6 <delay_ms+0x1c>
  a4:	a0 ed       	ldi	r26, 0xD0	; 208
  a6:	b7 e0       	ldi	r27, 0x07	; 7
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	cd 01       	movw	r24, r26
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <delay_ms+0x14>
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	d9 f7       	brne	.-10     	; 0xac <delay_ms+0x12>
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <delay_sec>:
//
// crude "sleep" function for 0 to 255 seconds
//
void
delay_sec(uint8_t sec)
{
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	18 2f       	mov	r17, r24
	uint8_t i;
	for (i = 0; i < sec; i++) {
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	c8 17       	cp	r28, r24
  c6:	b0 f4       	brcc	.+44     	; 0xf4 <delay_sec+0x38>
		delay_ms(250);
  c8:	8a ef       	ldi	r24, 0xFA	; 250
  ca:	e7 df       	rcall	.-50     	; 0x9a <delay_ms>
		delay_ms(250);
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	e5 df       	rcall	.-54     	; 0x9a <delay_ms>
		delay_ms(250);
  d0:	8a ef       	ldi	r24, 0xFA	; 250
  d2:	e3 df       	rcall	.-58     	; 0x9a <delay_ms>
		delay_ms(250);
  d4:	8a ef       	ldi	r24, 0xFA	; 250
  d6:	e1 df       	rcall	.-62     	; 0x9a <delay_ms>
//
void
delay_sec(uint8_t sec)
{
	uint8_t i;
	for (i = 0; i < sec; i++) {
  d8:	cf 5f       	subi	r28, 0xFF	; 255
  da:	c1 17       	cp	r28, r17
  dc:	58 f4       	brcc	.+22     	; 0xf4 <delay_sec+0x38>
		delay_ms(250);
  de:	8a ef       	ldi	r24, 0xFA	; 250
  e0:	dc df       	rcall	.-72     	; 0x9a <delay_ms>
		delay_ms(250);
  e2:	8a ef       	ldi	r24, 0xFA	; 250
  e4:	da df       	rcall	.-76     	; 0x9a <delay_ms>
		delay_ms(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	d8 df       	rcall	.-80     	; 0x9a <delay_ms>
		delay_ms(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	d6 df       	rcall	.-84     	; 0x9a <delay_ms>
//
void
delay_sec(uint8_t sec)
{
	uint8_t i;
	for (i = 0; i < sec; i++) {
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	c1 17       	cp	r28, r17
  f2:	50 f3       	brcs	.-44     	; 0xc8 <delay_sec+0xc>
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <draw_arrow>:

#define XMAX (XSCREEN-1)
#define YMAX (YSCREEN-1)


void draw_arrow(byte dir, byte clr) {
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
  fe:	86 2f       	mov	r24, r22
	setcolor(clr);
 100:	97 d3       	rcall	.+1838   	; 0x830 <setcolor>
	if (dir == DIRECTION_A) {
 102:	cc 23       	and	r28, r28
 104:	51 f0       	breq	.+20     	; 0x11a <draw_arrow+0x20>
		drawpoint(2, 2);
		drawpoint(3, 3);
		drawpoint(4, 4);
		//drawpoint(5, 5);
	}
	else if (dir == DIRECTION_B) {
 106:	c1 30       	cpi	r28, 0x01	; 1
 108:	09 f4       	brne	.+2      	; 0x10c <draw_arrow+0x12>
 10a:	3f c0       	rjmp	.+126    	; 0x18a <draw_arrow+0x90>
		drawpoint(2, 2);
		drawpoint(3, 1);
		drawpoint(4, 0);
		//drawpoint(0, 5);
	}
	else if (dir == DIRECTION_C) {
 10c:	c2 30       	cpi	r28, 0x02	; 2
 10e:	09 f4       	brne	.+2      	; 0x112 <draw_arrow+0x18>
 110:	58 c0       	rjmp	.+176    	; 0x1c2 <draw_arrow+0xc8>
		drawpoint(3, 1);
		drawpoint(2, 0);
		//drawpoint(0, 5);

	}
	else if (dir == DIRECTION_D) {
 112:	c3 30       	cpi	r28, 0x03	; 3
 114:	09 f0       	breq	.+2      	; 0x118 <draw_arrow+0x1e>
 116:	70 c0       	rjmp	.+224    	; 0x1f8 <draw_arrow+0xfe>
 118:	1c c0       	rjmp	.+56     	; 0x152 <draw_arrow+0x58>

void draw_arrow(byte dir, byte clr) {
	setcolor(clr);
	if (dir == DIRECTION_A) {
		//POINTS UP AND LEFT
		drawpoint(0, 0);
 11a:	6c 2f       	mov	r22, r28
 11c:	8c 2f       	mov	r24, r28
 11e:	90 d3       	rcall	.+1824   	; 0x840 <drawpoint>
		drawpoint(0, 1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	8c 2f       	mov	r24, r28
 124:	8d d3       	rcall	.+1818   	; 0x840 <drawpoint>
		drawpoint(0, 2);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	8c 2f       	mov	r24, r28
 12a:	8a d3       	rcall	.+1812   	; 0x840 <drawpoint>
		drawpoint(1, 0);
 12c:	6c 2f       	mov	r22, r28
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	87 d3       	rcall	.+1806   	; 0x840 <drawpoint>
		drawpoint(2, 0);
 132:	6c 2f       	mov	r22, r28
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	84 d3       	rcall	.+1800   	; 0x840 <drawpoint>
		drawpoint(1, 1);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	86 2f       	mov	r24, r22
 13c:	81 d3       	rcall	.+1794   	; 0x840 <drawpoint>
		drawpoint(2, 2);
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	86 2f       	mov	r24, r22
 142:	7e d3       	rcall	.+1788   	; 0x840 <drawpoint>
		drawpoint(3, 3);
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	86 2f       	mov	r24, r22
 148:	7b d3       	rcall	.+1782   	; 0x840 <drawpoint>
		drawpoint(4, 4);
 14a:	64 e0       	ldi	r22, 0x04	; 4
 14c:	86 2f       	mov	r24, r22
		drawpoint(5, 0);
		drawpoint(4, 0);
		drawpoint(5, 1);
		drawpoint(4, 2);
		drawpoint(3, 3);
		drawpoint(2, 4);
 14e:	78 d3       	rcall	.+1776   	; 0x840 <drawpoint>
 150:	53 c0       	rjmp	.+166    	; 0x1f8 <draw_arrow+0xfe>

	}
	else if (dir == DIRECTION_D) {

		//POINTS UP AND RIGHT
		drawpoint(6, 0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	74 d3       	rcall	.+1768   	; 0x840 <drawpoint>
		drawpoint(6, 1);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	71 d3       	rcall	.+1762   	; 0x840 <drawpoint>
		drawpoint(6, 2);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	6e d3       	rcall	.+1756   	; 0x840 <drawpoint>
		drawpoint(5, 0);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	6b d3       	rcall	.+1750   	; 0x840 <drawpoint>
		drawpoint(4, 0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	68 d3       	rcall	.+1744   	; 0x840 <drawpoint>
		drawpoint(5, 1);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	65 d3       	rcall	.+1738   	; 0x840 <drawpoint>
		drawpoint(4, 2);
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	62 d3       	rcall	.+1732   	; 0x840 <drawpoint>
		drawpoint(3, 3);
 17c:	6c 2f       	mov	r22, r28
 17e:	8c 2f       	mov	r24, r28
 180:	5f d3       	rcall	.+1726   	; 0x840 <drawpoint>
		drawpoint(2, 4);
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	5c d3       	rcall	.+1720   	; 0x840 <drawpoint>
 188:	37 c0       	rjmp	.+110    	; 0x1f8 <draw_arrow+0xfe>
		drawpoint(4, 4);
		//drawpoint(5, 5);
	}
	else if (dir == DIRECTION_B) {
		//POINTS DOWN AND LEFT
		drawpoint(0, 4);
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	58 d3       	rcall	.+1712   	; 0x840 <drawpoint>
		drawpoint(0, 3);
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	55 d3       	rcall	.+1706   	; 0x840 <drawpoint>
		drawpoint(0, 2);
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	52 d3       	rcall	.+1700   	; 0x840 <drawpoint>
		drawpoint(1, 4);
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	8c 2f       	mov	r24, r28
 1a0:	4f d3       	rcall	.+1694   	; 0x840 <drawpoint>
		drawpoint(2, 4);
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	4c d3       	rcall	.+1688   	; 0x840 <drawpoint>
		drawpoint(1, 3);
 1a8:	63 e0       	ldi	r22, 0x03	; 3
 1aa:	8c 2f       	mov	r24, r28
 1ac:	49 d3       	rcall	.+1682   	; 0x840 <drawpoint>
		drawpoint(2, 2);
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	86 2f       	mov	r24, r22
 1b2:	46 d3       	rcall	.+1676   	; 0x840 <drawpoint>
		drawpoint(3, 1);
 1b4:	6c 2f       	mov	r22, r28
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	43 d3       	rcall	.+1670   	; 0x840 <drawpoint>
		drawpoint(4, 0);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	84 e0       	ldi	r24, 0x04	; 4
		drawpoint(5, 0);
		drawpoint(4, 0);
		drawpoint(5, 1);
		drawpoint(4, 2);
		drawpoint(3, 3);
		drawpoint(2, 4);
 1be:	40 d3       	rcall	.+1664   	; 0x840 <drawpoint>
 1c0:	1b c0       	rjmp	.+54     	; 0x1f8 <draw_arrow+0xfe>
		drawpoint(4, 0);
		//drawpoint(0, 5);
	}
	else if (dir == DIRECTION_C) {
		//POINTS DOWN AND RIGHT
		drawpoint(6, 4);
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	3c d3       	rcall	.+1656   	; 0x840 <drawpoint>
		drawpoint(6, 3);
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	39 d3       	rcall	.+1650   	; 0x840 <drawpoint>
		drawpoint(6, 2);
 1ce:	6c 2f       	mov	r22, r28
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	36 d3       	rcall	.+1644   	; 0x840 <drawpoint>
		drawpoint(5, 4);
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	33 d3       	rcall	.+1638   	; 0x840 <drawpoint>
		drawpoint(4, 4);
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	86 2f       	mov	r24, r22
 1de:	30 d3       	rcall	.+1632   	; 0x840 <drawpoint>
		drawpoint(5, 3);
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	2d d3       	rcall	.+1626   	; 0x840 <drawpoint>
		drawpoint(4, 2);
 1e6:	6c 2f       	mov	r22, r28
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	2a d3       	rcall	.+1620   	; 0x840 <drawpoint>
		drawpoint(3, 1);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	27 d3       	rcall	.+1614   	; 0x840 <drawpoint>
		drawpoint(2, 0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	8c 2f       	mov	r24, r28
		drawpoint(5, 0);
		drawpoint(4, 0);
		drawpoint(5, 1);
		drawpoint(4, 2);
		drawpoint(3, 3);
		drawpoint(2, 4);
 1f6:	24 d3       	rcall	.+1608   	; 0x840 <drawpoint>
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <startup_screen>:
}



void startup_screen() {
	draw_arrow(DIRECTION_A, GREEN);
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	7c df       	rcall	.-264    	; 0xfa <draw_arrow>
	delay_ms(200);
 202:	88 ec       	ldi	r24, 0xC8	; 200
 204:	4a df       	rcall	.-364    	; 0x9a <delay_ms>
	delay_ms(200);
 206:	88 ec       	ldi	r24, 0xC8	; 200
 208:	48 df       	rcall	.-368    	; 0x9a <delay_ms>
	delay_ms(200);
 20a:	88 ec       	ldi	r24, 0xC8	; 200
 20c:	46 df       	rcall	.-372    	; 0x9a <delay_ms>
	cleardisplay();
 20e:	08 d3       	rcall	.+1552   	; 0x820 <cleardisplay>
	draw_arrow(DIRECTION_B, GREEN);
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	72 df       	rcall	.-284    	; 0xfa <draw_arrow>
	delay_ms(200);
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	40 df       	rcall	.-384    	; 0x9a <delay_ms>
	delay_ms(200);
 21a:	88 ec       	ldi	r24, 0xC8	; 200
 21c:	3e df       	rcall	.-388    	; 0x9a <delay_ms>
	delay_ms(200);
 21e:	88 ec       	ldi	r24, 0xC8	; 200
 220:	3c df       	rcall	.-392    	; 0x9a <delay_ms>
	cleardisplay();
 222:	fe d2       	rcall	.+1532   	; 0x820 <cleardisplay>
	draw_arrow(DIRECTION_C, GREEN);
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	86 2f       	mov	r24, r22
 228:	68 df       	rcall	.-304    	; 0xfa <draw_arrow>
	delay_ms(200);
 22a:	88 ec       	ldi	r24, 0xC8	; 200
 22c:	36 df       	rcall	.-404    	; 0x9a <delay_ms>
	delay_ms(200);
 22e:	88 ec       	ldi	r24, 0xC8	; 200
 230:	34 df       	rcall	.-408    	; 0x9a <delay_ms>
	delay_ms(200);
 232:	88 ec       	ldi	r24, 0xC8	; 200
 234:	32 df       	rcall	.-412    	; 0x9a <delay_ms>
	cleardisplay();
 236:	f4 d2       	rcall	.+1512   	; 0x820 <cleardisplay>
	draw_arrow(DIRECTION_D, GREEN);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	5e df       	rcall	.-324    	; 0xfa <draw_arrow>
	delay_ms(200);
 23e:	88 ec       	ldi	r24, 0xC8	; 200
 240:	2c df       	rcall	.-424    	; 0x9a <delay_ms>
	delay_ms(200);
 242:	88 ec       	ldi	r24, 0xC8	; 200
 244:	2a df       	rcall	.-428    	; 0x9a <delay_ms>
	delay_ms(200);
 246:	88 ec       	ldi	r24, 0xC8	; 200
 248:	28 df       	rcall	.-432    	; 0x9a <delay_ms>
	cleardisplay();
 24a:	ea d2       	rcall	.+1492   	; 0x820 <cleardisplay>
 24c:	08 95       	ret

0000024e <main>:
}


int
main(void)
{
 24e:	cf ef       	ldi	r28, 0xFF	; 255
 250:	d4 e0       	ldi	r29, 0x04	; 4
 252:	de bf       	out	0x3e, r29	; 62
 254:	cd bf       	out	0x3d, r28	; 61
	int cnt;
	byte btnDown = 0;
 256:	dd 24       	eor	r13, r13
	byte level = 1;
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	c9 2e       	mov	r12, r25

    avrinit();
 25c:	52 d2       	rcall	.+1188   	; 0x702 <avrinit>

	initswapbuffers();
 25e:	d3 d2       	rcall	.+1446   	; 0x806 <initswapbuffers>
	swapinterval(10);		// note: display refresh is 100hz (lower number speeds up game)
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	d9 d2       	rcall	.+1458   	; 0x816 <swapinterval>
	cleardisplay();
 264:	dd d2       	rcall	.+1466   	; 0x820 <cleardisplay>

	start_timer1();			// this starts display refresh and audio processing
 266:	35 d2       	rcall	.+1130   	; 0x6d2 <start_timer1>
	
	button_init();
 268:	5a d2       	rcall	.+1204   	; 0x71e <button_init>

	initaudio();			// XXX eventually, we remove this!
 26a:	7c d3       	rcall	.+1784   	; 0x964 <initaudio>

	//setwavetable(WT_SINE);
	playsong(ClassicalIntroSong);	// test audio
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	a8 d3       	rcall	.+1872   	; 0x9c2 <playsong>

	startup_screen();
 272:	c4 df       	rcall	.-120    	; 0x1fc <startup_screen>

	delay_sec(1);
 274:	8c 2d       	mov	r24, r12
 276:	22 df       	rcall	.-444    	; 0xbc <delay_sec>

	//
	// and now, the game
	//
nextlevel:
    cleardisplay();
 278:	d3 d2       	rcall	.+1446   	; 0x820 <cleardisplay>
    for(cnt=0; cnt<level; cnt++) {
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	ec 2c       	mov	r14, r12
 280:	ff 24       	eor	r15, r15
 282:	1e 14       	cp	r1, r14
 284:	1f 04       	cpc	r1, r15
 286:	94 f4       	brge	.+36     	; 0x2ac <main+0x5e>
 288:	01 e2       	ldi	r16, 0x21	; 33
 28a:	11 e0       	ldi	r17, 0x01	; 1
	    draw_arrow(arrows[cnt], GREEN);
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	f8 01       	movw	r30, r16
 290:	81 91       	ld	r24, Z+
 292:	8f 01       	movw	r16, r30
 294:	32 df       	rcall	.-412    	; 0xfa <draw_arrow>
	    delay_ms(200);
 296:	88 ec       	ldi	r24, 0xC8	; 200
 298:	00 df       	rcall	.-512    	; 0x9a <delay_ms>
	    delay_ms(200);
 29a:	88 ec       	ldi	r24, 0xC8	; 200
 29c:	fe de       	rcall	.-516    	; 0x9a <delay_ms>
	    delay_ms(200);
 29e:	88 ec       	ldi	r24, 0xC8	; 200
 2a0:	fc de       	rcall	.-520    	; 0x9a <delay_ms>
	    cleardisplay();		
 2a2:	be d2       	rcall	.+1404   	; 0x820 <cleardisplay>
	//
	// and now, the game
	//
nextlevel:
    cleardisplay();
    for(cnt=0; cnt<level; cnt++) {
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	ce 15       	cp	r28, r14
 2a8:	df 05       	cpc	r29, r15
 2aa:	84 f3       	brlt	.-32     	; 0x28c <main+0x3e>
	    delay_ms(200);
	    delay_ms(200);
	    cleardisplay();		
    }
    
    cnt = 0;
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
 2b0:	01 e2       	ldi	r16, 0x21	; 33
 2b2:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {

		cleardisplay();
 2b4:	b5 d2       	rcall	.+1386   	; 0x820 <cleardisplay>
		handlebuttons();
 2b6:	68 d2       	rcall	.+1232   	; 0x788 <handlebuttons>
		
		
		if (!btnDown) {
 2b8:	dd 20       	and	r13, r13
 2ba:	59 f5       	brne	.+86     	; 0x312 <main+0xc4>

			if (ButtonA || ButtonB || ButtonC || ButtonD) {
 2bc:	90 91 b0 02 	lds	r25, 0x02B0
 2c0:	99 23       	and	r25, r25
 2c2:	61 f4       	brne	.+24     	; 0x2dc <main+0x8e>
 2c4:	80 91 99 02 	lds	r24, 0x0299
 2c8:	88 23       	and	r24, r24
 2ca:	41 f4       	brne	.+16     	; 0x2dc <main+0x8e>
 2cc:	80 91 98 02 	lds	r24, 0x0298
 2d0:	88 23       	and	r24, r24
 2d2:	21 f4       	brne	.+8      	; 0x2dc <main+0x8e>
 2d4:	80 91 b4 02 	lds	r24, 0x02B4
 2d8:	88 23       	and	r24, r24
 2da:	29 f0       	breq	.+10     	; 0x2e6 <main+0x98>
				btnDown = 1;			
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	d8 2e       	mov	r13, r24
			}

	
			if (ButtonA) {
 2e0:	99 23       	and	r25, r25
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <main+0x98>
 2e4:	55 c0       	rjmp	.+170    	; 0x390 <main+0x142>
				else {
					goto gameover;
				}
	
			}
			if (ButtonB) {
 2e6:	80 91 99 02 	lds	r24, 0x0299
 2ea:	88 23       	and	r24, r24
 2ec:	21 f5       	brne	.+72     	; 0x336 <main+0xe8>
					goto gameover;
				}
	
			}
	
			if (ButtonC) {
 2ee:	80 91 98 02 	lds	r24, 0x0298
 2f2:	88 23       	and	r24, r24
 2f4:	81 f5       	brne	.+96     	; 0x356 <main+0x108>
				else {
					goto gameover;
				}
	
			}
			if (ButtonD) {
 2f6:	80 91 b4 02 	lds	r24, 0x02B4
 2fa:	88 23       	and	r24, r24
 2fc:	e1 f5       	brne	.+120    	; 0x376 <main+0x128>
			
			}
			

		
			if (cnt == level) {
 2fe:	ec 16       	cp	r14, r28
 300:	fd 06       	cpc	r15, r29
 302:	c1 f6       	brne	.-80     	; 0x2b4 <main+0x66>
				level++;
 304:	c3 94       	inc	r12
				arrows[cnt] = DIRECTION_D;
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	f8 01       	movw	r30, r16
 30a:	80 83       	st	Z, r24
				delay_ms(200);
 30c:	88 ec       	ldi	r24, 0xC8	; 200
 30e:	c5 de       	rcall	.-630    	; 0x9a <delay_ms>
 310:	b3 cf       	rjmp	.-154    	; 0x278 <main+0x2a>
				goto nextlevel;
			}

		}
		else {
			if (!ButtonA && !ButtonB && !ButtonC && !ButtonD) {
 312:	80 91 b0 02 	lds	r24, 0x02B0
 316:	88 23       	and	r24, r24
 318:	69 f6       	brne	.-102    	; 0x2b4 <main+0x66>
 31a:	80 91 99 02 	lds	r24, 0x0299
 31e:	88 23       	and	r24, r24
 320:	49 f6       	brne	.-110    	; 0x2b4 <main+0x66>
 322:	80 91 98 02 	lds	r24, 0x0298
 326:	88 23       	and	r24, r24
 328:	29 f6       	brne	.-118    	; 0x2b4 <main+0x66>
 32a:	80 91 b4 02 	lds	r24, 0x02B4
 32e:	88 23       	and	r24, r24
 330:	09 f6       	brne	.-126    	; 0x2b4 <main+0x66>
				btnDown = 0;
 332:	d8 2e       	mov	r13, r24
 334:	bf cf       	rjmp	.-130    	; 0x2b4 <main+0x66>
					goto gameover;
				}
	
			}
			if (ButtonB) {
				draw_arrow(DIRECTION_B, RED);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	86 2f       	mov	r24, r22
 33a:	df de       	rcall	.-578    	; 0xfa <draw_arrow>
				delay_ms(100);
 33c:	84 e6       	ldi	r24, 0x64	; 100
 33e:	ad de       	rcall	.-678    	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_B) {
 340:	f8 01       	movw	r30, r16
 342:	80 81       	ld	r24, Z
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	89 f5       	brne	.+98     	; 0x3aa <main+0x15c>
					cnt++;
 348:	21 96       	adiw	r28, 0x01	; 1
 34a:	0f 5f       	subi	r16, 0xFF	; 255
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
					goto gameover;
				}
	
			}
	
			if (ButtonC) {
 34e:	80 91 98 02 	lds	r24, 0x0298
 352:	88 23       	and	r24, r24
 354:	81 f2       	breq	.-96     	; 0x2f6 <main+0xa8>
				draw_arrow(DIRECTION_C, RED);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	cf de       	rcall	.-610    	; 0xfa <draw_arrow>
				delay_ms(100);
 35c:	84 e6       	ldi	r24, 0x64	; 100
 35e:	9d de       	rcall	.-710    	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_C) {
 360:	f8 01       	movw	r30, r16
 362:	80 81       	ld	r24, Z
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	09 f5       	brne	.+66     	; 0x3aa <main+0x15c>
					cnt++;
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	0f 5f       	subi	r16, 0xFF	; 255
 36c:	1f 4f       	sbci	r17, 0xFF	; 255
				else {
					goto gameover;
				}
	
			}
			if (ButtonD) {
 36e:	80 91 b4 02 	lds	r24, 0x02B4
 372:	88 23       	and	r24, r24
 374:	21 f2       	breq	.-120    	; 0x2fe <main+0xb0>
				draw_arrow(DIRECTION_D, RED);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	bf de       	rcall	.-642    	; 0xfa <draw_arrow>
				delay_ms(100);
 37c:	84 e6       	ldi	r24, 0x64	; 100
 37e:	8d de       	rcall	.-742    	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_D) {
 380:	f8 01       	movw	r30, r16
 382:	80 81       	ld	r24, Z
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	89 f4       	brne	.+34     	; 0x3aa <main+0x15c>
					cnt++;
 388:	21 96       	adiw	r28, 0x01	; 1
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
 38e:	b7 cf       	rjmp	.-146    	; 0x2fe <main+0xb0>
				btnDown = 1;			
			}

	
			if (ButtonA) {
				draw_arrow(DIRECTION_A, RED);
 390:	6d 2d       	mov	r22, r13
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	b2 de       	rcall	.-668    	; 0xfa <draw_arrow>
				delay_ms(100);
 396:	84 e6       	ldi	r24, 0x64	; 100
 398:	80 de       	rcall	.-768    	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_A) {
 39a:	f8 01       	movw	r30, r16
 39c:	80 81       	ld	r24, Z
 39e:	88 23       	and	r24, r24
 3a0:	21 f4       	brne	.+8      	; 0x3aa <main+0x15c>
					cnt++;
 3a2:	21 96       	adiw	r28, 0x01	; 1
 3a4:	0f 5f       	subi	r16, 0xFF	; 255
 3a6:	1f 4f       	sbci	r17, 0xFF	; 255
 3a8:	9e cf       	rjmp	.-196    	; 0x2e6 <main+0x98>

    }


gameover:
	cleardisplay();
 3aa:	3a d2       	rcall	.+1140   	; 0x820 <cleardisplay>
	return (0);
}
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	60 c3       	rjmp	.+1728   	; 0xa72 <_exit>

000003b2 <do_audio_isr>:

    // The PWM value is loaded into the timer compare register at the beginning of the ISR if we are playing a song.
    // This PWM value was calculated in the previous pass through the ISR.

    // turn off audio if we have played the last note in the song table in the last pass through the ISR
    if ( CurNote == N_END ) {                  // if we reached the end of the song table
 3b2:	80 91 95 02 	lds	r24, 0x0295
 3b6:	88 23       	and	r24, r24
 3b8:	39 f4       	brne	.+14     	; 0x3c8 <do_audio_isr+0x16>
        SongPlayFlag = 0;                 // stop playing song when reach end of song table    
 3ba:	80 93 b1 02 	sts	0x02B1, r24
        TCCR1A &= ~_BV(COM1A1);           // turn off audio by turning off compare
 3be:	80 91 80 00 	lds	r24, 0x0080
 3c2:	8f 77       	andi	r24, 0x7F	; 127
 3c4:	80 93 80 00 	sts	0x0080, r24
        //CurNote = 0;
    }

    // if we are playing a song, then calculate the PWM value to play the next time we get into the ISR
    if (SongPlayFlag) {          // only handle audio if we're playing a song (SongPlayFlag is set by main to start playing audio, and it is cleared by ISR when all events in active song table are completed)
 3c8:	80 91 b1 02 	lds	r24, 0x02B1
 3cc:	88 23       	and	r24, r24
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <do_audio_isr+0x20>
 3d0:	b9 c0       	rjmp	.+370    	; 0x544 <__stack+0x45>

        // if the Note to play is a Rest, then turn the speaker off
        if ( CurNote == N_REST )
 3d2:	80 91 95 02 	lds	r24, 0x0295
 3d6:	8f 3f       	cpi	r24, 0xFF	; 255
 3d8:	09 f4       	brne	.+2      	; 0x3dc <do_audio_isr+0x2a>
 3da:	cf c0       	rjmp	.+414    	; 0x57a <__stack+0x7b>
            TCCR1A &= ~_BV(COM1A1);  // turn off audio by turning off compare
        // otherwise, start playing the note by putting the PWM value in the timer compare register, and turing on the speaker
        else {
            TCCR1A |= _BV(COM1A1);   // make sure audio is turned on by turning on compare reg
 3dc:	80 91 80 00 	lds	r24, 0x0080
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	80 93 80 00 	sts	0x0080, r24
            OCR1A = PWMval;          // set the PWM time to next value (that was calculated on the previous pass through the ISR)
 3e6:	80 91 ad 02 	lds	r24, 0x02AD
 3ea:	90 91 ae 02 	lds	r25, 0x02AE
 3ee:	90 93 89 00 	sts	0x0089, r25
 3f2:	80 93 88 00 	sts	0x0088, r24
        }

        // calculate the next PWM value (this value will be used next time we get a timer interrrupt)
    
        // first, get the two values from the wavetable that we'll interpolating between
        Wptr2 = WtabCount.integ + WtabDelta.integ;
 3f6:	50 91 aa 02 	lds	r21, 0x02AA
 3fa:	40 91 93 02 	lds	r20, 0x0293
 3fe:	65 2f       	mov	r22, r21
 400:	64 0f       	add	r22, r20
 402:	71 2d       	mov	r23, r1
 404:	71 1d       	adc	r23, r1
 406:	db 01       	movw	r26, r22
        temp = WtabCount.fract + WtabDelta.fract;
 408:	90 91 ab 02 	lds	r25, 0x02AB
 40c:	80 91 94 02 	lds	r24, 0x0294
 410:	69 2f       	mov	r22, r25
 412:	68 0f       	add	r22, r24
 414:	71 2d       	mov	r23, r1
 416:	71 1d       	adc	r23, r1
 418:	9b 01       	movw	r18, r22
        if ( temp >= 256) Wptr2 += 1;   // if both fractional parts add to 1 or more, get next byte in wavetable for Val2
 41a:	6f 3f       	cpi	r22, 0xFF	; 255
 41c:	71 05       	cpc	r23, r1
 41e:	11 f0       	breq	.+4      	; 0x424 <do_audio_isr+0x72>
 420:	08 f0       	brcs	.+2      	; 0x424 <do_audio_isr+0x72>
 422:	11 96       	adiw	r26, 0x01	; 1
        if ( temp > 0) Wptr2 += 1;      // if there is a fractional part, get next byte in wavetable for Val2
 424:	21 15       	cp	r18, r1
 426:	31 05       	cpc	r19, r1
 428:	09 f0       	breq	.+2      	; 0x42c <do_audio_isr+0x7a>
 42a:	11 96       	adiw	r26, 0x01	; 1
        Wptr1 = Wptr2 - 1;              // the first value is always the byte before the second value
 42c:	cd 01       	movw	r24, r26
 42e:	01 97       	sbiw	r24, 0x01	; 1
        if ( Wptr2 >= WTABSIZE) Wptr2 -= WTABSIZE;  // wrap around to the beginning of the wavetable if we reached the end of it
 430:	a0 32       	cpi	r26, 0x20	; 32
 432:	b1 05       	cpc	r27, r1
 434:	08 f0       	brcs	.+2      	; 0x438 <do_audio_isr+0x86>
 436:	90 97       	sbiw	r26, 0x20	; 32
        if ( Wptr1 >= WTABSIZE) Wptr1 -= WTABSIZE;  // wrap around to the beginning of the wavetable if we reached the end of it
 438:	80 32       	cpi	r24, 0x20	; 32
 43a:	91 05       	cpc	r25, r1
 43c:	08 f0       	brcs	.+2      	; 0x440 <do_audio_isr+0x8e>
 43e:	80 97       	sbiw	r24, 0x20	; 32
        WtabVal2 = wavPtr[Wptr2];       // get the second value from the wavetable
 440:	e0 91 9b 02 	lds	r30, 0x029B
 444:	f0 91 9c 02 	lds	r31, 0x029C
 448:	ae 0f       	add	r26, r30
 44a:	bf 1f       	adc	r27, r31
 44c:	6c 91       	ld	r22, X
        WtabVal1 = wavPtr[Wptr1];       // get the first value from the wavetable
 44e:	e8 0f       	add	r30, r24
 450:	f9 1f       	adc	r31, r25
 452:	e0 81       	ld	r30, Z
    
        // increment the Count by the Delta (fixed-point math)
        WtabCount.integ += WtabDelta.integ;
 454:	85 2f       	mov	r24, r21
 456:	84 0f       	add	r24, r20
        temp = WtabCount.fract + WtabDelta.fract;  // we need to put this value in "temp" since "temp" is an int (16-bit value) and the fract parts of WtabCount and WtabDelta are 8-bit values
        // if the fractional part became 1 or beyond, then increment the integ part and correct the fractional part
        if ( temp >= 256 ) {                       // (256 is the equivalent of "1" for the fractional part)
 458:	2f 3f       	cpi	r18, 0xFF	; 255
 45a:	31 05       	cpc	r19, r1
 45c:	21 f0       	breq	.+8      	; 0x466 <do_audio_isr+0xb4>
 45e:	18 f0       	brcs	.+6      	; 0x466 <do_audio_isr+0xb4>
            WtabCount.integ += 1;
 460:	8f 5f       	subi	r24, 0xFF	; 255
            temp -= 256;
 462:	20 50       	subi	r18, 0x00	; 0
 464:	31 40       	sbci	r19, 0x01	; 1
        }
        WtabCount.fract = temp;
 466:	20 93 ab 02 	sts	0x02AB, r18
        // if the counter is beyond the end of the table, then wrap it around to the beginning of the table
        if ( WtabCount.integ >= WTABSIZE) {
 46a:	80 32       	cpi	r24, 0x20	; 32
 46c:	08 f0       	brcs	.+2      	; 0x470 <do_audio_isr+0xbe>
            WtabCount.integ -= WTABSIZE;
 46e:	80 52       	subi	r24, 0x20	; 32
 470:	80 93 aa 02 	sts	0x02AA, r24
        // now interpolate between the two values
        // NOTE: we are limited to WtabDelta between 1.0000 and 1.996 [ i.e. integ=1, fract=(0 to 255) ]
        // this calculates the following:  
        //     if WtabVal2>WtabVal1:   PWMval = WtabVal1 + [(WtabVal2 - WtabVal1) * WtabCount]
        //     if WtabVal2<=WtabVal1:  PWMval = WtabVal1 - [(WtabVal1 - WtabVal2) * WtabCount]
        if (WtabVal2 > WtabVal1)
 474:	e6 17       	cp	r30, r22
 476:	08 f0       	brcs	.+2      	; 0x47a <do_audio_isr+0xc8>
 478:	77 c0       	rjmp	.+238    	; 0x568 <__stack+0x69>
            temp = (WtabVal2 - WtabVal1) * WtabCount.fract;
 47a:	86 2f       	mov	r24, r22
 47c:	99 27       	eor	r25, r25
 47e:	4e 2f       	mov	r20, r30
 480:	55 27       	eor	r21, r21
 482:	84 1b       	sub	r24, r20
 484:	95 0b       	sbc	r25, r21
 486:	20 91 ab 02 	lds	r18, 0x02AB
 48a:	33 27       	eor	r19, r19
        else
            temp = (WtabVal1 - WtabVal2) * WtabCount.fract;
 48c:	28 9f       	mul	r18, r24
 48e:	d0 01       	movw	r26, r0
 490:	29 9f       	mul	r18, r25
 492:	b0 0d       	add	r27, r0
 494:	38 9f       	mul	r19, r24
 496:	b0 0d       	add	r27, r0
 498:	11 24       	eor	r1, r1
        // round up if the fractional part of the result is 128 (80 hex) or more (i.e., "0.5" or more)
        if ( (temp && 0x00ff) < 0x0080 ) 
            temp = temp / 256;
 49a:	2b 2f       	mov	r18, r27
 49c:	33 27       	eor	r19, r19
        else
            temp = (temp / 256) + 1;
        // update PWMval
        if (WtabVal2 > WtabVal1) 
 49e:	e6 17       	cp	r30, r22
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <do_audio_isr+0xf2>
 4a2:	51 c0       	rjmp	.+162    	; 0x546 <__stack+0x47>
            PWMval = WtabVal1 + temp;
 4a4:	42 0f       	add	r20, r18
 4a6:	53 1f       	adc	r21, r19
        else 
            PWMval = WtabVal1 - temp;
 4a8:	50 93 ae 02 	sts	0x02AE, r21
 4ac:	40 93 ad 02 	sts	0x02AD, r20
        if (PWMval < 0) PWMval = 0;    // PWM should never go below zero if the above math is good, but I put this check here just in case
 4b0:	80 91 ad 02 	lds	r24, 0x02AD
 4b4:	90 91 ae 02 	lds	r25, 0x02AE
 4b8:	97 fd       	sbrc	r25, 7
 4ba:	51 c0       	rjmp	.+162    	; 0x55e <__stack+0x5f>
    
        // Wdur keeps track of the number of times through the ISR that we play a note (i.e., the duration of the sound)
        // If the duration is completed for playing this note (i.e., Wdur < 0), then we'll add a short pause after it to separate it from the next note
        if (Wdur > 0) {                // if the duration count is still above 0, then decrement it
 4bc:	80 91 9d 02 	lds	r24, 0x029D
 4c0:	90 91 9e 02 	lds	r25, 0x029E
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <do_audio_isr+0x122>
            Wdur--;
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	90 93 9e 02 	sts	0x029E, r25
 4ce:	80 93 9d 02 	sts	0x029D, r24
 4d2:	08 95       	ret
            
        } 
        else {                         // else we have finished playing this note from the wavetable
            // start a slight pause after the note (to distinguish it from the note to follow)
            if (Wnote_sep > 0) {                      // we'll keep playing no sound until we've gone through the ISR NOTE_SEP times, making a pause after playing the previously played note
 4d4:	80 91 b2 02 	lds	r24, 0x02B2
 4d8:	90 91 b3 02 	lds	r25, 0x02B3
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	09 f0       	breq	.+2      	; 0x4e2 <do_audio_isr+0x130>
 4e0:	52 c0       	rjmp	.+164    	; 0x586 <__stack+0x87>
            // if we're done with note separation pause, then set up the next note to play for the next time through the ISR
            else {
            	uint16_t tmp;
				uint8_t note, dur;

                Wnote_sep = NOTE_SEP;                 // reset note separation value
 4e2:	88 ec       	ldi	r24, 0xC8	; 200
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	90 93 b3 02 	sts	0x02B3, r25
 4ea:	80 93 b2 02 	sts	0x02B2, r24
                DDRB |= _BV(1);                       // turn SPKR (OC1A) port back on
 4ee:	21 9a       	sbi	0x04, 1	; 4
                //Disp[8] = 0x00;                     // XXX debug: turn off the one pixel

				// next time through the ISR we'll start playing the next note in the song table

				// note: this code is repeated inside playsong() - must match!!
				note = *songPtr++;
 4f0:	a0 91 b5 02 	lds	r26, 0x02B5
 4f4:	b0 91 b6 02 	lds	r27, 0x02B6
 4f8:	4d 91       	ld	r20, X+
 4fa:	b0 93 b6 02 	sts	0x02B6, r27
 4fe:	a0 93 b5 02 	sts	0x02B5, r26
				tmp = GETNOTEDELTA(note);
 502:	e4 2f       	mov	r30, r20
 504:	ff 27       	eor	r31, r31
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e3 55       	subi	r30, 0x53	; 83
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	20 81       	ld	r18, Z
 510:	31 81       	ldd	r19, Z+1	; 0x01
				WtabDelta.integ = (uint8_t)((tmp >> 8) & 0xff);		// high byte
 512:	83 2f       	mov	r24, r19
 514:	99 27       	eor	r25, r25
 516:	80 93 93 02 	sts	0x0293, r24
				WtabDelta.fract = (uint8_t)(tmp & 0xff);			// low byte
 51a:	20 93 94 02 	sts	0x0294, r18
				dur = *songPtr++;
 51e:	8d 91       	ld	r24, X+
 520:	b0 93 b6 02 	sts	0x02B6, r27
 524:	a0 93 b5 02 	sts	0x02B5, r26
				CurNote = note;						// set 1st note to play, and
 528:	40 93 95 02 	sts	0x0295, r20
				Wdur = GETDURATION(dur);   			// its duration.
 52c:	e8 2f       	mov	r30, r24
 52e:	ff 27       	eor	r31, r31
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	ed 57       	subi	r30, 0x7D	; 125
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	90 93 9e 02 	sts	0x029E, r25
 540:	80 93 9d 02 	sts	0x029D, r24
 544:	08 95       	ret
            temp = (temp / 256) + 1;
        // update PWMval
        if (WtabVal2 > WtabVal1) 
            PWMval = WtabVal1 + temp;
        else 
            PWMval = WtabVal1 - temp;
 546:	42 1b       	sub	r20, r18
 548:	53 0b       	sbc	r21, r19
 54a:	50 93 ae 02 	sts	0x02AE, r21
 54e:	40 93 ad 02 	sts	0x02AD, r20
        if (PWMval < 0) PWMval = 0;    // PWM should never go below zero if the above math is good, but I put this check here just in case
 552:	80 91 ad 02 	lds	r24, 0x02AD
 556:	90 91 ae 02 	lds	r25, 0x02AE
 55a:	97 ff       	sbrs	r25, 7
 55c:	af cf       	rjmp	.-162    	; 0x4bc <do_audio_isr+0x10a>
 55e:	10 92 ae 02 	sts	0x02AE, r1
 562:	10 92 ad 02 	sts	0x02AD, r1
 566:	aa cf       	rjmp	.-172    	; 0x4bc <do_audio_isr+0x10a>
        //     if WtabVal2>WtabVal1:   PWMval = WtabVal1 + [(WtabVal2 - WtabVal1) * WtabCount]
        //     if WtabVal2<=WtabVal1:  PWMval = WtabVal1 - [(WtabVal1 - WtabVal2) * WtabCount]
        if (WtabVal2 > WtabVal1)
            temp = (WtabVal2 - WtabVal1) * WtabCount.fract;
        else
            temp = (WtabVal1 - WtabVal2) * WtabCount.fract;
 568:	4e 2f       	mov	r20, r30
 56a:	55 27       	eor	r21, r21
 56c:	9a 01       	movw	r18, r20
 56e:	26 1b       	sub	r18, r22
 570:	31 09       	sbc	r19, r1
 572:	80 91 ab 02 	lds	r24, 0x02AB
 576:	99 27       	eor	r25, r25
 578:	89 cf       	rjmp	.-238    	; 0x48c <do_audio_isr+0xda>
    // if we are playing a song, then calculate the PWM value to play the next time we get into the ISR
    if (SongPlayFlag) {          // only handle audio if we're playing a song (SongPlayFlag is set by main to start playing audio, and it is cleared by ISR when all events in active song table are completed)

        // if the Note to play is a Rest, then turn the speaker off
        if ( CurNote == N_REST )
            TCCR1A &= ~_BV(COM1A1);  // turn off audio by turning off compare
 57a:	80 91 80 00 	lds	r24, 0x0080
 57e:	8f 77       	andi	r24, 0x7F	; 127
 580:	80 93 80 00 	sts	0x0080, r24
 584:	38 cf       	rjmp	.-400    	; 0x3f6 <do_audio_isr+0x44>
            
        } 
        else {                         // else we have finished playing this note from the wavetable
            // start a slight pause after the note (to distinguish it from the note to follow)
            if (Wnote_sep > 0) {                      // we'll keep playing no sound until we've gone through the ISR NOTE_SEP times, making a pause after playing the previously played note
                Wnote_sep--;    
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	90 93 b3 02 	sts	0x02B3, r25
 58c:	80 93 b2 02 	sts	0x02B2, r24
                //Disp[8] = 0x40;                     // XXX debug: turn on one pixel
                DDRB &= ~_BV(1);                      // turn off SPKR (OC1A) port
 590:	21 98       	cbi	0x04, 1	; 4
 592:	08 95       	ret

00000594 <__vector_13>:
    }
}


ISR(TIMER1_OVF_vect)
{
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	4f 93       	push	r20
 5a4:	5f 93       	push	r21
 5a6:	6f 93       	push	r22
 5a8:	7f 93       	push	r23
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	af 93       	push	r26
 5b0:	bf 93       	push	r27
 5b2:	ef 93       	push	r30
 5b4:	ff 93       	push	r31

	// first, handle audio
	do_audio_isr();
 5b6:	fd de       	rcall	.-518    	; 0x3b2 <do_audio_isr>


	// next, handle the display

	if (--Rcount == 0) {		// do we display a new row this time?  (only every 20 or so)
 5b8:	80 91 90 02 	lds	r24, 0x0290
 5bc:	81 50       	subi	r24, 0x01	; 1
 5be:	80 93 90 02 	sts	0x0290, r24
 5c2:	80 91 90 02 	lds	r24, 0x0290
 5c6:	88 23       	and	r24, r24
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_13+0x38>
 5ca:	72 c0       	rjmp	.+228    	; 0x6b0 <__vector_13+0x11c>
		Rcount = 20;
 5cc:	84 e1       	ldi	r24, 0x14	; 20
 5ce:	80 93 90 02 	sts	0x0290, r24

		//
		// we display green columns (5) followed by the red columns (5).
		// each will stay on for "Rcount" ticks (20 ticks is about 1ms).
		//
		switch (CurRow) {
 5d2:	80 91 9a 02 	lds	r24, 0x029A
 5d6:	99 27       	eor	r25, r25
 5d8:	aa 27       	eor	r26, r26
 5da:	bb 27       	eor	r27, r27
 5dc:	fc 01       	movw	r30, r24
 5de:	0a 97       	sbiw	r24, 0x0a	; 10
 5e0:	f0 f0       	brcs	.+60     	; 0x61e <__vector_13+0x8a>
				break;

		}	// switch


		CurRow++;
 5e2:	80 91 9a 02 	lds	r24, 0x029A
 5e6:	8f 5f       	subi	r24, 0xFF	; 255
 5e8:	80 93 9a 02 	sts	0x029A, r24
		if (CurRow >= 10) {
 5ec:	80 91 9a 02 	lds	r24, 0x029A
 5f0:	8a 30       	cpi	r24, 0x0A	; 10
 5f2:	08 f4       	brcc	.+2      	; 0x5f6 <__vector_13+0x62>
 5f4:	5d c0       	rjmp	.+186    	; 0x6b0 <__vector_13+0x11c>
			CurRow = 0;
 5f6:	10 92 9a 02 	sts	0x029A, r1
			if (--SwapCounter == 0) {			// we count down display cycles...
 5fa:	80 91 af 02 	lds	r24, 0x02AF
 5fe:	81 50       	subi	r24, 0x01	; 1
 600:	80 93 af 02 	sts	0x02AF, r24
 604:	80 91 af 02 	lds	r24, 0x02AF
 608:	88 23       	and	r24, r24
 60a:	09 f0       	breq	.+2      	; 0x60e <__vector_13+0x7a>
 60c:	51 c0       	rjmp	.+162    	; 0x6b0 <__vector_13+0x11c>
				SwapCounter = SwapInterval;
 60e:	80 91 a9 02 	lds	r24, 0x02A9
 612:	80 93 af 02 	sts	0x02AF, r24
				SwapRelease = 1;				// now mark the end of the display cycle
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 ac 02 	sts	0x02AC, r24
 61c:	49 c0       	rjmp	.+146    	; 0x6b0 <__vector_13+0x11c>

		//
		// we display green columns (5) followed by the red columns (5).
		// each will stay on for "Rcount" ticks (20 ticks is about 1ms).
		//
		switch (CurRow) {
 61e:	e6 5e       	subi	r30, 0xE6	; 230
 620:	ff 4f       	sbci	r31, 0xFF	; 255
 622:	09 94       	ijmp
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 624:	2e 98       	cbi	0x05, 6	; 5
				output_high(RC4);
				break;

			case 9:
				output_low(RC4);
				PORTD = Disp[9] | 0x80;
 626:	80 91 a8 02 	lds	r24, 0x02A8
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 62e:	2f 9a       	sbi	0x05, 7	; 5
 630:	d8 cf       	rjmp	.-80     	; 0x5e2 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 632:	2f 98       	cbi	0x05, 7	; 5
		// each will stay on for "Rcount" ticks (20 ticks is about 1ms).
		//
		switch (CurRow) {
			case 0:
				output_low(RC5);
				PORTD = Disp[0] | 0x80;		// note: keep PD7 high (pullup for SW4)
 634:	80 91 9f 02 	lds	r24, 0x029F
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 63c:	41 9a       	sbi	0x08, 1	; 8
 63e:	d1 cf       	rjmp	.-94     	; 0x5e2 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 640:	41 98       	cbi	0x08, 1	; 8
				output_high(GC1);
				break;

			case 1:
				output_low(GC1);
				PORTD = Disp[1] | 0x80;
 642:	80 91 a0 02 	lds	r24, 0x02A0
 646:	80 68       	ori	r24, 0x80	; 128
 648:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 64a:	42 9a       	sbi	0x08, 2	; 8
 64c:	ca cf       	rjmp	.-108    	; 0x5e2 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 64e:	42 98       	cbi	0x08, 2	; 8
				output_high(GC2);
				break;

			case 2:
				output_low(GC2);
				PORTD = Disp[2] | 0x80;
 650:	80 91 a1 02 	lds	r24, 0x02A1
 654:	80 68       	ori	r24, 0x80	; 128
 656:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 658:	43 9a       	sbi	0x08, 3	; 8
 65a:	c3 cf       	rjmp	.-122    	; 0x5e2 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 65c:	43 98       	cbi	0x08, 3	; 8
				output_high(GC3);
				break;

			case 3:
				output_low(GC3);
				PORTD = Disp[3] | 0x80;
 65e:	80 91 a2 02 	lds	r24, 0x02A2
 662:	80 68       	ori	r24, 0x80	; 128
 664:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 666:	44 9a       	sbi	0x08, 4	; 8
 668:	bc cf       	rjmp	.-136    	; 0x5e2 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 66a:	44 98       	cbi	0x08, 4	; 8
				output_high(GC4);
				break;

			case 4:
				output_low(GC4);
				PORTD = Disp[4] | 0x80;
 66c:	80 91 a3 02 	lds	r24, 0x02A3
 670:	80 68       	ori	r24, 0x80	; 128
 672:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 674:	45 9a       	sbi	0x08, 5	; 8
 676:	b5 cf       	rjmp	.-150    	; 0x5e2 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 678:	45 98       	cbi	0x08, 5	; 8
				output_high(GC5);
				break;

			case 5:
				output_low(GC5);
				PORTD = Disp[5] | 0x80;
 67a:	80 91 a4 02 	lds	r24, 0x02A4
 67e:	80 68       	ori	r24, 0x80	; 128
 680:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 682:	2b 9a       	sbi	0x05, 3	; 5
 684:	ae cf       	rjmp	.-164    	; 0x5e2 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 686:	2b 98       	cbi	0x05, 3	; 5
				output_high(RC1);
				break;

			case 6:
				output_low(RC1);
				PORTD = Disp[6] | 0x80;
 688:	80 91 a5 02 	lds	r24, 0x02A5
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 690:	2c 9a       	sbi	0x05, 4	; 5
 692:	a7 cf       	rjmp	.-178    	; 0x5e2 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 694:	2c 98       	cbi	0x05, 4	; 5
				output_high(RC2);
				break;

			case 7:
				output_low(RC2);
				PORTD = Disp[7] | 0x80;
 696:	80 91 a6 02 	lds	r24, 0x02A6
 69a:	80 68       	ori	r24, 0x80	; 128
 69c:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 69e:	2d 9a       	sbi	0x05, 5	; 5
 6a0:	a0 cf       	rjmp	.-192    	; 0x5e2 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 6a2:	2d 98       	cbi	0x05, 5	; 5
				output_high(RC3);
				break;

			case 8:
				output_low(RC3);
				PORTD = Disp[8] | 0x80;
 6a4:	80 91 a7 02 	lds	r24, 0x02A7
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 6ac:	2e 9a       	sbi	0x05, 6	; 5
 6ae:	99 cf       	rjmp	.-206    	; 0x5e2 <__vector_13+0x4e>
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	bf 91       	pop	r27
 6b6:	af 91       	pop	r26
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	7f 91       	pop	r23
 6be:	6f 91       	pop	r22
 6c0:	5f 91       	pop	r21
 6c2:	4f 91       	pop	r20
 6c4:	3f 91       	pop	r19
 6c6:	2f 91       	pop	r18
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <start_timer1>:
{

	// initialize ICR1, which sets the "TOP" value for the counter to interrupt and start over
	// note: value of 50-1 ==> 20khz (assumes 8mhz clock, prescaled by 1/8)
	//ICR1 = 50-1;
	ICR1 = 50-1;
 6d2:	81 e3       	ldi	r24, 0x31	; 49
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	90 93 87 00 	sts	0x0087, r25
 6da:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 25;
 6de:	89 e1       	ldi	r24, 0x19	; 25
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	90 93 89 00 	sts	0x0089, r25
 6e6:	80 93 88 00 	sts	0x0088, r24
	// start timer:
	// set fast PWM, mode 14
	// and set prescaler to system clock/8
	//

	TCCR1A = _BV(COM1A1) | _BV(WGM11);			// note: COM1A1 enables the compare match against OCR1A
 6ea:	82 e8       	ldi	r24, 0x82	; 130
 6ec:	80 93 80 00 	sts	0x0080, r24

	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS11);
 6f0:	8a e1       	ldi	r24, 0x1A	; 26
 6f2:	80 93 81 00 	sts	0x0081, r24

	TIMSK1 |= _BV(TOIE1);		// enable timer1 overflow interrupt
 6f6:	80 91 6f 00 	lds	r24, 0x006F
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	80 93 6f 00 	sts	0x006F, r24
 700:	08 95       	ret

00000702 <avrinit>:
	// note: DDR pins are set to "1" to be an output, "0" for input.

	//          76543210
	//PORTB = 0b00000101;		// initial: pullups on inputs
	//DDRB  = 0b11111010;		// inputs: SW1 (PB0), SW2 (PB2); outputs: SPKR (PB1), RC1-RC5 (PB3-PB7)
	PORTB = 0x05;			// (see above)
 702:	85 e0       	ldi	r24, 0x05	; 5
 704:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0xFA;			// (see above)
 706:	8a ef       	ldi	r24, 0xFA	; 250
 708:	84 b9       	out	0x04, r24	; 4
	
	//          76543210
	//PORTC = 0b00000001;		// initial: pullups on inputs
	//DDRC  = 0b11111110;		// inputs: SW3 (PC0); outputs: GC1-GC5 (PC1-PC5)
	PORTC = 0x01;		// (see above)
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0xFE;		// (see above)
 70e:	8e ef       	ldi	r24, 0xFE	; 254
 710:	87 b9       	out	0x07, r24	; 7
	
	//          76543210
	//PORTD = 0b10000000;		// initial: pullups on inputs
	//DDRD  = 0b01111111;		// inputs: SW4 (PD7) outputs: ROW1-ROW7 (PD0-PD6)

	PORTD = 0x80;		// (see above)
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x7F;		// (see above)
 716:	8f e7       	ldi	r24, 0x7F	; 127
 718:	8a b9       	out	0x0a, r24	; 10


	sei();					// enable interrupts (individual interrupts still need to be enabled)
 71a:	78 94       	sei
 71c:	08 95       	ret

0000071e <button_init>:
}


void button_init(void)
{
	ButtonA = 0;
 71e:	10 92 b0 02 	sts	0x02B0, r1
	ButtonB = 0;
 722:	10 92 99 02 	sts	0x0299, r1
	ButtonC = 0;
 726:	10 92 98 02 	sts	0x0298, r1
	ButtonD = 0;
 72a:	10 92 b4 02 	sts	0x02B4, r1
	ButtonAEvent = 0;
 72e:	10 92 96 02 	sts	0x0296, r1
	ButtonBEvent = 0;
 732:	10 92 92 02 	sts	0x0292, r1
	ButtonCEvent = 0;
 736:	10 92 97 02 	sts	0x0297, r1
	ButtonDEvent = 0;
 73a:	10 92 b7 02 	sts	0x02B7, r1
 73e:	08 95       	ret

00000740 <poll_buttons>:

void poll_buttons(void)
{
	// clear the state of a button, if it has been released

	if (ButtonA) {
 740:	80 91 b0 02 	lds	r24, 0x02B0
 744:	88 23       	and	r24, r24
 746:	11 f0       	breq	.+4      	; 0x74c <poll_buttons+0xc>
//	returns the value of the input pin (but does not shift it!)
//
//	note: the most efficient code is generated when testing the return value against 0.
//
static inline unsigned char input_test(unsigned char pin)
{
 748:	18 99       	sbic	0x03, 0	; 3
 74a:	1b c0       	rjmp	.+54     	; 0x782 <poll_buttons+0x42>
		if (!button_pressed(SW1)) {
			ButtonA = 0;
		}
	}
	if (ButtonB) {
 74c:	80 91 99 02 	lds	r24, 0x0299
 750:	88 23       	and	r24, r24
 752:	11 f0       	breq	.+4      	; 0x758 <poll_buttons+0x18>
 754:	1a 99       	sbic	0x03, 2	; 3
 756:	12 c0       	rjmp	.+36     	; 0x77c <poll_buttons+0x3c>
		if (!button_pressed(SW2)) {
			ButtonB = 0;
		}
	}
	if (ButtonC) {
 758:	80 91 98 02 	lds	r24, 0x0298
 75c:	88 23       	and	r24, r24
 75e:	11 f0       	breq	.+4      	; 0x764 <poll_buttons+0x24>
 760:	30 99       	sbic	0x06, 0	; 6
 762:	09 c0       	rjmp	.+18     	; 0x776 <poll_buttons+0x36>
		if (!button_pressed(SW3)) {
			ButtonC = 0;
		}
	}
	if (ButtonD) {
 764:	80 91 b4 02 	lds	r24, 0x02B4
 768:	88 23       	and	r24, r24
 76a:	21 f0       	breq	.+8      	; 0x774 <poll_buttons+0x34>
 76c:	4f 9b       	sbis	0x09, 7	; 9
 76e:	02 c0       	rjmp	.+4      	; 0x774 <poll_buttons+0x34>
		if (!button_pressed(SW4)) {
			ButtonD = 0;
 770:	10 92 b4 02 	sts	0x02B4, r1
 774:	08 95       	ret
			ButtonB = 0;
		}
	}
	if (ButtonC) {
		if (!button_pressed(SW3)) {
			ButtonC = 0;
 776:	10 92 98 02 	sts	0x0298, r1
 77a:	f4 cf       	rjmp	.-24     	; 0x764 <poll_buttons+0x24>
			ButtonA = 0;
		}
	}
	if (ButtonB) {
		if (!button_pressed(SW2)) {
			ButtonB = 0;
 77c:	10 92 99 02 	sts	0x0299, r1
 780:	eb cf       	rjmp	.-42     	; 0x758 <poll_buttons+0x18>
{
	// clear the state of a button, if it has been released

	if (ButtonA) {
		if (!button_pressed(SW1)) {
			ButtonA = 0;
 782:	10 92 b0 02 	sts	0x02B0, r1
 786:	e2 cf       	rjmp	.-60     	; 0x74c <poll_buttons+0xc>

00000788 <handlebuttons>:
// this watches for button "events" and performs actions accordingly.
//
void handlebuttons(void)
{

	if (!ButtonA && button_pressed(SW1)) {
 788:	80 91 b0 02 	lds	r24, 0x02B0
 78c:	88 23       	and	r24, r24
 78e:	41 f4       	brne	.+16     	; 0x7a0 <handlebuttons+0x18>
 790:	18 99       	sbic	0x03, 0	; 3
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <handlebuttons+0x18>
	
		ButtonA = 1;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	80 93 b0 02 	sts	0x02B0, r24

		// action
		ButtonAEvent = 1;
 79a:	80 93 96 02 	sts	0x0296, r24
 79e:	08 95       	ret

	} else if (!ButtonB && button_pressed(SW2)) {
 7a0:	80 91 99 02 	lds	r24, 0x0299
 7a4:	88 23       	and	r24, r24
 7a6:	91 f0       	breq	.+36     	; 0x7cc <handlebuttons+0x44>
		ButtonB = 1;
	
		// action
		ButtonBEvent = 1;
		
	} else if (!ButtonC && button_pressed(SW3)) {
 7a8:	80 91 98 02 	lds	r24, 0x0298
 7ac:	88 23       	and	r24, r24
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <handlebuttons+0x2c>
 7b0:	30 9b       	sbis	0x06, 0	; 6
 7b2:	16 c0       	rjmp	.+44     	; 0x7e0 <handlebuttons+0x58>
		ButtonC = 1;
	
		// action
		ButtonCEvent = 1;
		
	} else if (!ButtonD && button_pressed(SW4)) {
 7b4:	80 91 b4 02 	lds	r24, 0x02B4
 7b8:	88 23       	and	r24, r24
 7ba:	81 f4       	brne	.+32     	; 0x7dc <handlebuttons+0x54>
 7bc:	4f 99       	sbic	0x09, 7	; 9
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <handlebuttons+0x54>

		ButtonD = 1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 b4 02 	sts	0x02B4, r24
	
		// action
		ButtonDEvent = 1;
 7c6:	80 93 b7 02 	sts	0x02B7, r24
 7ca:	08 95       	ret
 7cc:	1a 99       	sbic	0x03, 2	; 3
 7ce:	ec cf       	rjmp	.-40     	; 0x7a8 <handlebuttons+0x20>
		// action
		ButtonAEvent = 1;

	} else if (!ButtonB && button_pressed(SW2)) {

		ButtonB = 1;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	80 93 99 02 	sts	0x0299, r24
	
		// action
		ButtonBEvent = 1;
 7d6:	80 93 92 02 	sts	0x0292, r24
 7da:	08 95       	ret
	
		// action
		ButtonDEvent = 1;
		
	} else {
		poll_buttons();
 7dc:	b1 df       	rcall	.-158    	; 0x740 <poll_buttons>
 7de:	08 95       	ret
		// action
		ButtonBEvent = 1;
		
	} else if (!ButtonC && button_pressed(SW3)) {

		ButtonC = 1;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	80 93 98 02 	sts	0x0298, r24
	
		// action
		ButtonCEvent = 1;
 7e6:	80 93 97 02 	sts	0x0297, r24
 7ea:	08 95       	ret

000007ec <swapbuffers>:
 *
 */
void swapbuffers(void)
{
	while (!SwapRelease) {		// spin until this flag is set
		NOP();
 7ec:	80 91 ac 02 	lds	r24, 0x02AC
 7f0:	88 23       	and	r24, r24
 7f2:	29 f4       	brne	.+10     	; 0x7fe <swapbuffers+0x12>
 7f4:	00 00       	nop
 7f6:	80 91 ac 02 	lds	r24, 0x02AC
 7fa:	88 23       	and	r24, r24
 7fc:	d9 f3       	breq	.-10     	; 0x7f4 <swapbuffers+0x8>
	}
	NOP();
 7fe:	00 00       	nop
	SwapRelease = 0;			// clear flag (for next time)
 800:	10 92 ac 02 	sts	0x02AC, r1
 804:	08 95       	ret

00000806 <initswapbuffers>:
}

void initswapbuffers(void)
{
	SwapRelease = 0;
 806:	10 92 ac 02 	sts	0x02AC, r1
	SwapInterval = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 a9 02 	sts	0x02A9, r24
	SwapCounter = 1;
 810:	80 93 af 02 	sts	0x02AF, r24
 814:	08 95       	ret

00000816 <swapinterval>:
}

void swapinterval(uint8_t i)
{
	if (i != 0) {
 816:	88 23       	and	r24, r24
 818:	11 f0       	breq	.+4      	; 0x81e <swapinterval+0x8>
		SwapInterval = i;
 81a:	80 93 a9 02 	sts	0x02A9, r24
 81e:	08 95       	ret

00000820 <cleardisplay>:
	}
}


void cleardisplay(void)
{
 820:	ef e9       	ldi	r30, 0x9F	; 159
 822:	f2 e0       	ldi	r31, 0x02	; 2
 824:	89 e0       	ldi	r24, 0x09	; 9
	uint8_t i;

	// initialize display buffer

	for (i = 0; i < 10; i++) {
		Disp[i] = 0x0;
 826:	11 92       	st	Z+, r1
{
	uint8_t i;

	// initialize display buffer

	for (i = 0; i < 10; i++) {
 828:	81 50       	subi	r24, 0x01	; 1
 82a:	87 ff       	sbrs	r24, 7
 82c:	fc cf       	rjmp	.-8      	; 0x826 <cleardisplay+0x6>
 82e:	08 95       	ret

00000830 <setcolor>:
//
// set the current color (RED, GREEN, ...)
//
void setcolor(uint8_t c)
{
	_CurColor = 0x3 & c;
 830:	83 70       	andi	r24, 0x03	; 3
 832:	80 93 8f 02 	sts	0x028F, r24
 836:	08 95       	ret

00000838 <getcolor>:
//
// get the current color (returns it).
//
uint8_t getcolor(void)
{
	return _CurColor;
 838:	80 91 8f 02 	lds	r24, 0x028F
}
 83c:	99 27       	eor	r25, r25
 83e:	08 95       	ret

00000840 <drawpoint>:
//
//	note: upper left is (0 0) and lower right is (6 4)
//
//
void drawpoint(uint8_t x, uint8_t y)
{
 840:	28 2f       	mov	r18, r24
	uint8_t bits;

	if ((x < 7) && (y < 5)) {	// clipping
 842:	87 30       	cpi	r24, 0x07	; 7
 844:	38 f5       	brcc	.+78     	; 0x894 <drawpoint+0x54>
 846:	65 30       	cpi	r22, 0x05	; 5
 848:	28 f5       	brcc	.+74     	; 0x894 <drawpoint+0x54>
		bits = 0x40 >> x;
 84a:	80 e4       	ldi	r24, 0x40	; 64
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <drawpoint+0x14>
 850:	95 95       	asr	r25
 852:	87 95       	ror	r24
 854:	2a 95       	dec	r18
 856:	e2 f7       	brpl	.-8      	; 0x850 <drawpoint+0x10>
 858:	28 2f       	mov	r18, r24
		if (_CurColor & 0x1) {	// red plane
 85a:	30 91 8f 02 	lds	r19, 0x028F
 85e:	30 fd       	sbrc	r19, 0
 860:	1a c0       	rjmp	.+52     	; 0x896 <drawpoint+0x56>
			Disp[y+5] |= bits;
		} else {
			Disp[y+5] &= ~bits;
 862:	77 27       	eor	r23, r23
 864:	fb 01       	movw	r30, r22
 866:	e1 56       	subi	r30, 0x61	; 97
 868:	fd 4f       	sbci	r31, 0xFD	; 253
 86a:	98 2f       	mov	r25, r24
 86c:	90 95       	com	r25
 86e:	85 81       	ldd	r24, Z+5	; 0x05
 870:	89 23       	and	r24, r25
 872:	85 83       	std	Z+5, r24	; 0x05
		}
		if (_CurColor & 0x2) {	// green plane
 874:	31 ff       	sbrs	r19, 1
 876:	07 c0       	rjmp	.+14     	; 0x886 <drawpoint+0x46>
			Disp[y] |= bits;
 878:	fb 01       	movw	r30, r22
 87a:	e1 56       	subi	r30, 0x61	; 97
 87c:	fd 4f       	sbci	r31, 0xFD	; 253
 87e:	80 81       	ld	r24, Z
 880:	82 2b       	or	r24, r18
 882:	80 83       	st	Z, r24
 884:	08 95       	ret
		} else {
			Disp[y] &= ~bits;
 886:	fb 01       	movw	r30, r22
 888:	e1 56       	subi	r30, 0x61	; 97
 88a:	fd 4f       	sbci	r31, 0xFD	; 253
 88c:	20 95       	com	r18
 88e:	80 81       	ld	r24, Z
 890:	82 23       	and	r24, r18
 892:	80 83       	st	Z, r24
 894:	08 95       	ret
	uint8_t bits;

	if ((x < 7) && (y < 5)) {	// clipping
		bits = 0x40 >> x;
		if (_CurColor & 0x1) {	// red plane
			Disp[y+5] |= bits;
 896:	77 27       	eor	r23, r23
 898:	fb 01       	movw	r30, r22
 89a:	e1 56       	subi	r30, 0x61	; 97
 89c:	fd 4f       	sbci	r31, 0xFD	; 253
 89e:	85 81       	ldd	r24, Z+5	; 0x05
 8a0:	82 2b       	or	r24, r18
 8a2:	e7 cf       	rjmp	.-50     	; 0x872 <drawpoint+0x32>

000008a4 <drawfilledrect>:
//	draw a filled rectangle from (x1 y1) to (x2 y2)
//
//	XXX probably could be optimized more
//
void drawfilledrect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	18 2f       	mov	r17, r24
 8ae:	02 2f       	mov	r16, r18
	uint8_t bits;
	uint8_t x, y, tmp;

	if ((x1 < 7) && (y1 < 5) && (x2 < 7) && (y2 < 5)) {	// clipping
 8b0:	87 30       	cpi	r24, 0x07	; 7
 8b2:	08 f0       	brcs	.+2      	; 0x8b6 <drawfilledrect+0x12>
 8b4:	52 c0       	rjmp	.+164    	; 0x95a <drawfilledrect+0xb6>
 8b6:	65 30       	cpi	r22, 0x05	; 5
 8b8:	08 f0       	brcs	.+2      	; 0x8bc <drawfilledrect+0x18>
 8ba:	4f c0       	rjmp	.+158    	; 0x95a <drawfilledrect+0xb6>
 8bc:	47 30       	cpi	r20, 0x07	; 7
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <drawfilledrect+0x1e>
 8c0:	4c c0       	rjmp	.+152    	; 0x95a <drawfilledrect+0xb6>
 8c2:	25 30       	cpi	r18, 0x05	; 5
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <drawfilledrect+0x24>
 8c6:	49 c0       	rjmp	.+146    	; 0x95a <drawfilledrect+0xb6>
		if (x1 > x2) {
 8c8:	48 17       	cp	r20, r24
 8ca:	08 f4       	brcc	.+2      	; 0x8ce <drawfilledrect+0x2a>
 8cc:	43 c0       	rjmp	.+134    	; 0x954 <drawfilledrect+0xb0>
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if (y1 > y2) {
 8ce:	06 17       	cp	r16, r22
 8d0:	18 f4       	brcc	.+6      	; 0x8d8 <drawfilledrect+0x34>
			tmp = y1;
 8d2:	86 2f       	mov	r24, r22
			y1 = y2;
 8d4:	60 2f       	mov	r22, r16
			y2 = tmp;
 8d6:	08 2f       	mov	r16, r24
		}
		for (y = y1; y <= y2; y++) {
 8d8:	26 2f       	mov	r18, r22
 8da:	06 17       	cp	r16, r22
 8dc:	f0 f1       	brcs	.+124    	; 0x95a <drawfilledrect+0xb6>
 8de:	80 91 8f 02 	lds	r24, 0x028F
 8e2:	99 27       	eor	r25, r25
 8e4:	bc 01       	movw	r22, r24
 8e6:	61 70       	andi	r22, 0x01	; 1
 8e8:	70 70       	andi	r23, 0x00	; 0
 8ea:	dc 01       	movw	r26, r24
 8ec:	a2 70       	andi	r26, 0x02	; 2
 8ee:	b0 70       	andi	r27, 0x00	; 0
			for (x = x1; x <= x2; x++) {
 8f0:	51 2f       	mov	r21, r17
 8f2:	41 17       	cp	r20, r17
 8f4:	58 f1       	brcs	.+86     	; 0x94c <drawfilledrect+0xa8>
 8f6:	e2 2f       	mov	r30, r18
 8f8:	ff 27       	eor	r31, r31
 8fa:	c0 e4       	ldi	r28, 0x40	; 64
 8fc:	d0 e0       	ldi	r29, 0x00	; 0
 8fe:	e1 56       	subi	r30, 0x61	; 97
 900:	fd 4f       	sbci	r31, 0xFD	; 253
 902:	0b c0       	rjmp	.+22     	; 0x91a <drawfilledrect+0x76>
				bits = 0x40 >> x;
				if (_CurColor & 0x1) {	// red plane
					Disp[y+5] |= bits;
 904:	85 81       	ldd	r24, Z+5	; 0x05
 906:	83 2b       	or	r24, r19
				} else {
					Disp[y+5] &= ~bits;
 908:	85 83       	std	Z+5, r24	; 0x05
				}
				if (_CurColor & 0x2) {	// green plane
 90a:	10 97       	sbiw	r26, 0x00	; 0
 90c:	c1 f0       	breq	.+48     	; 0x93e <drawfilledrect+0x9a>
					Disp[y] |= bits;
 90e:	80 81       	ld	r24, Z
 910:	83 2b       	or	r24, r19
				} else {
					Disp[y] &= ~bits;
 912:	80 83       	st	Z, r24
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		for (y = y1; y <= y2; y++) {
			for (x = x1; x <= x2; x++) {
 914:	5f 5f       	subi	r21, 0xFF	; 255
 916:	45 17       	cp	r20, r21
 918:	c8 f0       	brcs	.+50     	; 0x94c <drawfilledrect+0xa8>
				bits = 0x40 >> x;
 91a:	ce 01       	movw	r24, r28
 91c:	05 2e       	mov	r0, r21
 91e:	02 c0       	rjmp	.+4      	; 0x924 <drawfilledrect+0x80>
 920:	95 95       	asr	r25
 922:	87 95       	ror	r24
 924:	0a 94       	dec	r0
 926:	e2 f7       	brpl	.-8      	; 0x920 <drawfilledrect+0x7c>
 928:	38 2f       	mov	r19, r24
				if (_CurColor & 0x1) {	// red plane
 92a:	61 15       	cp	r22, r1
 92c:	71 05       	cpc	r23, r1
 92e:	51 f7       	brne	.-44     	; 0x904 <drawfilledrect+0x60>
					Disp[y+5] |= bits;
				} else {
					Disp[y+5] &= ~bits;
 930:	98 2f       	mov	r25, r24
 932:	90 95       	com	r25
 934:	85 81       	ldd	r24, Z+5	; 0x05
 936:	89 23       	and	r24, r25
 938:	85 83       	std	Z+5, r24	; 0x05
				}
				if (_CurColor & 0x2) {	// green plane
 93a:	10 97       	sbiw	r26, 0x00	; 0
 93c:	41 f7       	brne	.-48     	; 0x90e <drawfilledrect+0x6a>
					Disp[y] |= bits;
				} else {
					Disp[y] &= ~bits;
 93e:	30 95       	com	r19
 940:	80 81       	ld	r24, Z
 942:	83 23       	and	r24, r19
 944:	80 83       	st	Z, r24
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		for (y = y1; y <= y2; y++) {
			for (x = x1; x <= x2; x++) {
 946:	5f 5f       	subi	r21, 0xFF	; 255
 948:	45 17       	cp	r20, r21
 94a:	38 f7       	brcc	.-50     	; 0x91a <drawfilledrect+0x76>
		if (y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		for (y = y1; y <= y2; y++) {
 94c:	2f 5f       	subi	r18, 0xFF	; 255
 94e:	02 17       	cp	r16, r18
 950:	78 f6       	brcc	.-98     	; 0x8f0 <drawfilledrect+0x4c>
 952:	03 c0       	rjmp	.+6      	; 0x95a <drawfilledrect+0xb6>
	uint8_t x, y, tmp;

	if ((x1 < 7) && (y1 < 5) && (x2 < 7) && (y2 < 5)) {	// clipping
		if (x1 > x2) {
			tmp = x1;
			x1 = x2;
 954:	14 2f       	mov	r17, r20
			x2 = tmp;
 956:	48 2f       	mov	r20, r24
 958:	ba cf       	rjmp	.-140    	; 0x8ce <drawfilledrect+0x2a>
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	08 95       	ret

00000964 <initaudio>:
// a simple API for making sounds.

void initaudio(void)
{
	// default wavetable (WT_SAWTOOTH)
	wavPtr = SawWtable;
 964:	8f e4       	ldi	r24, 0x4F	; 79
 966:	92 e0       	ldi	r25, 0x02	; 2
 968:	90 93 9c 02 	sts	0x029C, r25
 96c:	80 93 9b 02 	sts	0x029B, r24
	
	// default tempo
	//XXX
	
	SongPlayFlag = 0;
 970:	10 92 b1 02 	sts	0x02B1, r1
	PWMval = wavPtr[0];		// initialize to first entry of table
 974:	80 91 4f 02 	lds	r24, 0x024F
 978:	99 27       	eor	r25, r25
 97a:	90 93 ae 02 	sts	0x02AE, r25
 97e:	80 93 ad 02 	sts	0x02AD, r24
 982:	08 95       	ret

00000984 <settempo>:
//
// sets tempo for playnote function.
// the default tempo is 72 beats per minute.
//
void settempo(byte bpm)
{
 984:	08 95       	ret

00000986 <setwavetable>:
// from the API all tables are just referenced by named constants.
// WT_SAWTOOTH is the default.
//
void setwavetable(byte wtable)
{
	if (wtable == WT_SINE) {
 986:	82 30       	cpi	r24, 0x02	; 2
 988:	29 f0       	breq	.+10     	; 0x994 <setwavetable+0xe>
		wavPtr = SineWtable;
	} else if (wtable == WT_SAWTOOTH) {
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	51 f0       	breq	.+20     	; 0x9a2 <setwavetable+0x1c>
		wavPtr = SawWtable;
	} else if (wtable == WT_SQUARE) {
 98e:	83 30       	cpi	r24, 0x03	; 3
 990:	79 f0       	breq	.+30     	; 0x9b0 <setwavetable+0x2a>
 992:	08 95       	ret
// WT_SAWTOOTH is the default.
//
void setwavetable(byte wtable)
{
	if (wtable == WT_SINE) {
		wavPtr = SineWtable;
 994:	8f e6       	ldi	r24, 0x6F	; 111
 996:	92 e0       	ldi	r25, 0x02	; 2
	} else if (wtable == WT_SAWTOOTH) {
		wavPtr = SawWtable;
 998:	90 93 9c 02 	sts	0x029C, r25
 99c:	80 93 9b 02 	sts	0x029B, r24
 9a0:	08 95       	ret
 9a2:	8f e4       	ldi	r24, 0x4F	; 79
 9a4:	92 e0       	ldi	r25, 0x02	; 2
 9a6:	90 93 9c 02 	sts	0x029C, r25
 9aa:	80 93 9b 02 	sts	0x029B, r24
 9ae:	08 95       	ret
	} else if (wtable == WT_SQUARE) {
		wavPtr = SquareWtable;
 9b0:	8f e2       	ldi	r24, 0x2F	; 47
 9b2:	92 e0       	ldi	r25, 0x02	; 2
 9b4:	90 93 9c 02 	sts	0x029C, r25
 9b8:	80 93 9b 02 	sts	0x029B, r24
 9bc:	08 95       	ret

000009be <playsound>:
//
// play a tone with pitch in Hz, and dur in ms.
// the current wavetable is used.
//
void playsound(int pitch, int dur)
{
 9be:	08 95       	ret

000009c0 <playnote>:
// duration dur (predefined constants like N_QUARTER, etc.)
// the current wavetable is used.
//
// XXX NYI !!
void playnote(byte note, byte dur)
{}
 9c0:	08 95       	ret

000009c2 <playsong>:
// and must end with the byte N_END.
//
// XXX do we correctly handle the case where this is called when a song is currently playing?
//
void playsong(byte *songtable)
{
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	ec 01       	movw	r28, r24
	uint16_t tmp;
	uint8_t note, dur;

	if (songtable == NULL) {		// error check
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	09 f4       	brne	.+2      	; 0x9ce <playsong+0xc>
 9cc:	41 c0       	rjmp	.+130    	; 0xa50 <playsong+0x8e>
		return;
	}
	
	SongPlayFlag = 0;				// just in case a song is currently playing
 9ce:	10 92 b1 02 	sts	0x02B1, r1

	songPtr = songtable;			// set pointer to the song table array
 9d2:	90 93 b6 02 	sts	0x02B6, r25
 9d6:	80 93 b5 02 	sts	0x02B5, r24

	note = *songPtr++;
 9da:	dc 01       	movw	r26, r24
 9dc:	4d 91       	ld	r20, X+
 9de:	b0 93 b6 02 	sts	0x02B6, r27
 9e2:	a0 93 b5 02 	sts	0x02B5, r26
	if (note != N_END) {
 9e6:	44 23       	and	r20, r20
 9e8:	99 f1       	breq	.+102    	; 0xa50 <playsong+0x8e>

		// note: this code is repeated inside ISR - must match!!
		tmp = GETNOTEDELTA(note);
 9ea:	e4 2f       	mov	r30, r20
 9ec:	ff 27       	eor	r31, r31
 9ee:	ee 0f       	add	r30, r30
 9f0:	ff 1f       	adc	r31, r31
 9f2:	e3 55       	subi	r30, 0x53	; 83
 9f4:	fe 4f       	sbci	r31, 0xFE	; 254
 9f6:	20 81       	ld	r18, Z
 9f8:	31 81       	ldd	r19, Z+1	; 0x01
		WtabDelta.integ = (uint8_t)((tmp >> 8) & 0xff);		// high byte
 9fa:	83 2f       	mov	r24, r19
 9fc:	99 27       	eor	r25, r25
 9fe:	80 93 93 02 	sts	0x0293, r24
		WtabDelta.fract = (uint8_t)(tmp & 0xff);			// low byte
 a02:	20 93 94 02 	sts	0x0294, r18
		dur = *songPtr++;
 a06:	89 81       	ldd	r24, Y+1	; 0x01
 a08:	11 96       	adiw	r26, 0x01	; 1
 a0a:	b0 93 b6 02 	sts	0x02B6, r27
 a0e:	a0 93 b5 02 	sts	0x02B5, r26
		CurNote = note;						// set 1st note to play, and
 a12:	40 93 95 02 	sts	0x0295, r20
		Wdur = GETDURATION(dur);   			// its duration.
 a16:	e8 2f       	mov	r30, r24
 a18:	ff 27       	eor	r31, r31
 a1a:	ee 0f       	add	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	ed 57       	subi	r30, 0x7D	; 125
 a20:	fe 4f       	sbci	r31, 0xFE	; 254
 a22:	80 81       	ld	r24, Z
 a24:	91 81       	ldd	r25, Z+1	; 0x01
 a26:	90 93 9e 02 	sts	0x029E, r25
 a2a:	80 93 9d 02 	sts	0x029D, r24

		WtabCount.integ = 0;				// we will start playing from start of current wavetable
 a2e:	10 92 aa 02 	sts	0x02AA, r1
		WtabCount.fract = 0;
 a32:	10 92 ab 02 	sts	0x02AB, r1
		PWMval = wavPtr[0];					// initialize to first entry of table
 a36:	e0 91 9b 02 	lds	r30, 0x029B
 a3a:	f0 91 9c 02 	lds	r31, 0x029C
 a3e:	80 81       	ld	r24, Z
 a40:	99 27       	eor	r25, r25
 a42:	90 93 ae 02 	sts	0x02AE, r25
 a46:	80 93 ad 02 	sts	0x02AD, r24
		SongPlayFlag = 1;					// start playing song
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	80 93 b1 02 	sts	0x02B1, r24
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	08 95       	ret

00000a56 <isaudioplaying>:
//
// this returns 1 if audio is playing, 0 otherwise.
//
byte isaudioplaying(void)
{
	return SongPlayFlag;
 a56:	80 91 b1 02 	lds	r24, 0x02B1
}
 a5a:	99 27       	eor	r25, r25
 a5c:	08 95       	ret

00000a5e <waitaudio>:
// this waits until audio (e.g. note or song) is finished, then returns.
//
void waitaudio(void)
{
	while (SongPlayFlag) {
		NOP();
 a5e:	80 91 b1 02 	lds	r24, 0x02B1
 a62:	88 23       	and	r24, r24
 a64:	29 f0       	breq	.+10     	; 0xa70 <waitaudio+0x12>
 a66:	00 00       	nop
 a68:	80 91 b1 02 	lds	r24, 0x02B1
 a6c:	88 23       	and	r24, r24
 a6e:	d9 f7       	brne	.-10     	; 0xa66 <waitaudio+0x8>
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <_exit>
