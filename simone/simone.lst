
simone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800100  00000f98  0000102c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800262  00800262  0000118e  2**0
                  ALLOC
  3 .debug_aranges 00000028  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003f6  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ba  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035a  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f7d  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000535  00000000  00000000  0000393d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	23 c0       	rjmp	.+70     	; 0x48 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	e6 c4       	rjmp	.+2508   	; 0x9e8 <__vector_13>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	2c c0       	rjmp	.+88     	; 0x7e <__bad_interrupt>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
  2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
  32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>
  34:	28 c5       	rjmp	.+2640   	; 0xa86 <__vector_13+0x9e>
  36:	2e c5       	rjmp	.+2652   	; 0xa94 <__vector_13+0xac>
  38:	34 c5       	rjmp	.+2664   	; 0xaa2 <__vector_13+0xba>
  3a:	3a c5       	rjmp	.+2676   	; 0xab0 <__vector_13+0xc8>
  3c:	40 c5       	rjmp	.+2688   	; 0xabe <__vector_13+0xd6>
  3e:	46 c5       	rjmp	.+2700   	; 0xacc <__vector_13+0xe4>
  40:	4c c5       	rjmp	.+2712   	; 0xada <__vector_13+0xf2>
  42:	52 c5       	rjmp	.+2724   	; 0xae8 <__vector_13+0x100>
  44:	58 c5       	rjmp	.+2736   	; 0xaf6 <__vector_13+0x10e>
  46:	18 c5       	rjmp	.+2608   	; 0xa78 <__vector_13+0x90>

00000048 <__ctors_end>:
  48:	11 24       	eor	r1, r1
  4a:	1f be       	out	0x3f, r1	; 63
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	d4 e0       	ldi	r29, 0x04	; 4
  50:	de bf       	out	0x3e, r29	; 62
  52:	cd bf       	out	0x3d, r28	; 61

00000054 <__do_copy_data>:
  54:	12 e0       	ldi	r17, 0x02	; 2
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b1 e0       	ldi	r27, 0x01	; 1
  5a:	e8 e9       	ldi	r30, 0x98	; 152
  5c:	ff e0       	ldi	r31, 0x0F	; 15
  5e:	02 c0       	rjmp	.+4      	; 0x64 <.do_copy_data_start>

00000060 <.do_copy_data_loop>:
  60:	05 90       	lpm	r0, Z+
  62:	0d 92       	st	X+, r0

00000064 <.do_copy_data_start>:
  64:	a2 36       	cpi	r26, 0x62	; 98
  66:	b1 07       	cpc	r27, r17
  68:	d9 f7       	brne	.-10     	; 0x60 <.do_copy_data_loop>

0000006a <__do_clear_bss>:
  6a:	12 e0       	ldi	r17, 0x02	; 2
  6c:	a2 e6       	ldi	r26, 0x62	; 98
  6e:	b2 e0       	ldi	r27, 0x02	; 2
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	ac 3e       	cpi	r26, 0xEC	; 236
  76:	b1 07       	cpc	r27, r17
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	d2 d2       	rcall	.+1444   	; 0x620 <main>
  7c:	8c c7       	rjmp	.+3864   	; 0xf96 <_exit>

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <delay_us>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  80:	98 2f       	mov	r25, r24
  82:	88 23       	and	r24, r24
  84:	49 f0       	breq	.+18     	; 0x98 <delay_us+0x18>
  86:	22 e0       	ldi	r18, 0x02	; 2
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	82 2f       	mov	r24, r18
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <delay_us+0x10>
  94:	91 50       	subi	r25, 0x01	; 1
  96:	d9 f7       	brne	.-10     	; 0x8e <delay_us+0xe>
  98:	08 95       	ret

0000009a <delay_ms>:
//
// crude delay of 1 to 255 ms
//
void
delay_ms(uint8_t ms)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 2f       	mov	r18, r24
  a0:	88 23       	and	r24, r24
  a2:	49 f0       	breq	.+18     	; 0xb6 <delay_ms+0x1c>
  a4:	a0 ed       	ldi	r26, 0xD0	; 208
  a6:	b7 e0       	ldi	r27, 0x07	; 7
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	cd 01       	movw	r24, r26
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <delay_ms+0x14>
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	d9 f7       	brne	.-10     	; 0xac <delay_ms+0x12>
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <delay_sec>:
//
// crude "sleep" function for 0 to 255 seconds
//
void
delay_sec(uint8_t sec)
{
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	18 2f       	mov	r17, r24
	uint8_t i;
	for (i = 0; i < sec; i++) {
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	c8 17       	cp	r28, r24
  c6:	b0 f4       	brcc	.+44     	; 0xf4 <delay_sec+0x38>
		delay_ms(250);
  c8:	8a ef       	ldi	r24, 0xFA	; 250
  ca:	e7 df       	rcall	.-50     	; 0x9a <delay_ms>
		delay_ms(250);
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	e5 df       	rcall	.-54     	; 0x9a <delay_ms>
		delay_ms(250);
  d0:	8a ef       	ldi	r24, 0xFA	; 250
  d2:	e3 df       	rcall	.-58     	; 0x9a <delay_ms>
		delay_ms(250);
  d4:	8a ef       	ldi	r24, 0xFA	; 250
  d6:	e1 df       	rcall	.-62     	; 0x9a <delay_ms>
//
void
delay_sec(uint8_t sec)
{
	uint8_t i;
	for (i = 0; i < sec; i++) {
  d8:	cf 5f       	subi	r28, 0xFF	; 255
  da:	c1 17       	cp	r28, r17
  dc:	58 f4       	brcc	.+22     	; 0xf4 <delay_sec+0x38>
		delay_ms(250);
  de:	8a ef       	ldi	r24, 0xFA	; 250
  e0:	dc df       	rcall	.-72     	; 0x9a <delay_ms>
		delay_ms(250);
  e2:	8a ef       	ldi	r24, 0xFA	; 250
  e4:	da df       	rcall	.-76     	; 0x9a <delay_ms>
		delay_ms(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	d8 df       	rcall	.-80     	; 0x9a <delay_ms>
		delay_ms(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	d6 df       	rcall	.-84     	; 0x9a <delay_ms>
//
void
delay_sec(uint8_t sec)
{
	uint8_t i;
	for (i = 0; i < sec; i++) {
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	c1 17       	cp	r28, r17
  f2:	50 f3       	brcs	.-44     	; 0xc8 <delay_sec+0xc>
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <next_random>:

// A 32-bit version
static uint32_t RandomSeedA = 65537;
static uint32_t RandomSeedB = 12345;

uint32_t next_random (uint32_t max) {
  fa:	6f 92       	push	r6
  fc:	7f 92       	push	r7
  fe:	8f 92       	push	r8
 100:	9f 92       	push	r9
 102:	af 92       	push	r10
 104:	bf 92       	push	r11
 106:	cf 92       	push	r12
 108:	df 92       	push	r13
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	3b 01       	movw	r6, r22
 114:	4c 01       	movw	r8, r24
	RandomSeedA = 36969 * (RandomSeedA & 65535) + (RandomSeedA >> 16);
 116:	a0 90 52 01 	lds	r10, 0x0152
 11a:	b0 90 53 01 	lds	r11, 0x0153
 11e:	c0 90 54 01 	lds	r12, 0x0154
 122:	d0 90 55 01 	lds	r13, 0x0155
 126:	d6 01       	movw	r26, r12
 128:	c5 01       	movw	r24, r10
 12a:	a0 70       	andi	r26, 0x00	; 0
 12c:	b0 70       	andi	r27, 0x00	; 0
 12e:	bc 01       	movw	r22, r24
 130:	cd 01       	movw	r24, r26
 132:	29 e6       	ldi	r18, 0x69	; 105
 134:	30 e9       	ldi	r19, 0x90	; 144
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	c5 d6       	rcall	.+3466   	; 0xec6 <__mulsi3>
 13c:	7b 01       	movw	r14, r22
 13e:	8c 01       	movw	r16, r24
 140:	c6 01       	movw	r24, r12
 142:	aa 27       	eor	r26, r26
 144:	bb 27       	eor	r27, r27
 146:	e8 0e       	add	r14, r24
 148:	f9 1e       	adc	r15, r25
 14a:	0a 1f       	adc	r16, r26
 14c:	1b 1f       	adc	r17, r27
 14e:	e0 92 52 01 	sts	0x0152, r14
 152:	f0 92 53 01 	sts	0x0153, r15
 156:	00 93 54 01 	sts	0x0154, r16
 15a:	10 93 55 01 	sts	0x0155, r17
	RandomSeedB = 18000 * (RandomSeedB & 65535) + (RandomSeedB >> 16);
 15e:	a0 90 4e 01 	lds	r10, 0x014E
 162:	b0 90 4f 01 	lds	r11, 0x014F
 166:	c0 90 50 01 	lds	r12, 0x0150
 16a:	d0 90 51 01 	lds	r13, 0x0151
 16e:	d6 01       	movw	r26, r12
 170:	c5 01       	movw	r24, r10
 172:	a0 70       	andi	r26, 0x00	; 0
 174:	b0 70       	andi	r27, 0x00	; 0
 176:	bc 01       	movw	r22, r24
 178:	cd 01       	movw	r24, r26
 17a:	20 e5       	ldi	r18, 0x50	; 80
 17c:	36 e4       	ldi	r19, 0x46	; 70
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	a1 d6       	rcall	.+3394   	; 0xec6 <__mulsi3>
 184:	9b 01       	movw	r18, r22
 186:	ac 01       	movw	r20, r24
 188:	c6 01       	movw	r24, r12
 18a:	aa 27       	eor	r26, r26
 18c:	bb 27       	eor	r27, r27
 18e:	28 0f       	add	r18, r24
 190:	39 1f       	adc	r19, r25
 192:	4a 1f       	adc	r20, r26
 194:	5b 1f       	adc	r21, r27
 196:	20 93 4e 01 	sts	0x014E, r18
 19a:	30 93 4f 01 	sts	0x014F, r19
 19e:	40 93 50 01 	sts	0x0150, r20
 1a2:	50 93 51 01 	sts	0x0151, r21
 	return ((RandomSeedA << 16) + RandomSeedB) % max;
 1a6:	d7 01       	movw	r26, r14
 1a8:	99 27       	eor	r25, r25
 1aa:	88 27       	eor	r24, r24
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	a4 1f       	adc	r26, r20
 1b2:	b5 1f       	adc	r27, r21
 1b4:	bc 01       	movw	r22, r24
 1b6:	cd 01       	movw	r24, r26
 1b8:	a4 01       	movw	r20, r8
 1ba:	93 01       	movw	r18, r6
 1bc:	b6 d6       	rcall	.+3436   	; 0xf2a <__udivmodsi4>
 1be:	dc 01       	movw	r26, r24
 1c0:	cb 01       	movw	r24, r22
}
 1c2:	bc 01       	movw	r22, r24
 1c4:	cd 01       	movw	r24, r26
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	bf 90       	pop	r11
 1d4:	af 90       	pop	r10
 1d6:	9f 90       	pop	r9
 1d8:	8f 90       	pop	r8
 1da:	7f 90       	pop	r7
 1dc:	6f 90       	pop	r6
 1de:	08 95       	ret

000001e0 <init_random>:

void init_random (void) {
	uint16_t *addr = 0;
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	20 91 4e 01 	lds	r18, 0x014E
 1e8:	30 91 4f 01 	lds	r19, 0x014F
 1ec:	40 91 50 01 	lds	r20, 0x0150
 1f0:	50 91 51 01 	lds	r21, 0x0151
	for (addr = 0; addr < (uint16_t*)0xFFFF; addr++) 
		RandomSeedB += (*addr);	
 1f4:	81 91       	ld	r24, Z+
 1f6:	91 91       	ld	r25, Z+
 1f8:	aa 27       	eor	r26, r26
 1fa:	bb 27       	eor	r27, r27
 1fc:	82 0f       	add	r24, r18
 1fe:	93 1f       	adc	r25, r19
 200:	a4 1f       	adc	r26, r20
 202:	b5 1f       	adc	r27, r21
 204:	9c 01       	movw	r18, r24
 206:	ad 01       	movw	r20, r26
 	return ((RandomSeedA << 16) + RandomSeedB) % max;
}

void init_random (void) {
	uint16_t *addr = 0;
	for (addr = 0; addr < (uint16_t*)0xFFFF; addr++) 
 208:	6f ef       	ldi	r22, 0xFF	; 255
 20a:	ef 3f       	cpi	r30, 0xFF	; 255
 20c:	f6 07       	cpc	r31, r22
 20e:	91 f7       	brne	.-28     	; 0x1f4 <init_random+0x14>
 210:	80 93 4e 01 	sts	0x014E, r24
 214:	90 93 4f 01 	sts	0x014F, r25
 218:	a0 93 50 01 	sts	0x0150, r26
 21c:	b0 93 51 01 	sts	0x0151, r27
 220:	08 95       	ret

00000222 <draw_arrow>:

// An 8 bit version



void draw_arrow(byte dir, byte clr) {
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
 226:	86 2f       	mov	r24, r22
	setcolor(clr);
 228:	2d d5       	rcall	.+2650   	; 0xc84 <setcolor>
	if (dir == DIRECTION_A) {
 22a:	cc 23       	and	r28, r28
 22c:	51 f0       	breq	.+20     	; 0x242 <draw_arrow+0x20>
		drawpoint(2, 2);
		drawpoint(3, 3);
		drawpoint(4, 4);
		//drawpoint(5, 5);
	}
	else if (dir == DIRECTION_B) {
 22e:	c1 30       	cpi	r28, 0x01	; 1
 230:	09 f4       	brne	.+2      	; 0x234 <draw_arrow+0x12>
 232:	3f c0       	rjmp	.+126    	; 0x2b2 <draw_arrow+0x90>
		drawpoint(2, 2);
		drawpoint(3, 1);
		drawpoint(4, 0);
		//drawpoint(0, 5);
	}
	else if (dir == DIRECTION_C) {
 234:	c2 30       	cpi	r28, 0x02	; 2
 236:	09 f4       	brne	.+2      	; 0x23a <draw_arrow+0x18>
 238:	58 c0       	rjmp	.+176    	; 0x2ea <draw_arrow+0xc8>
		drawpoint(3, 1);
		drawpoint(2, 0);
		//drawpoint(0, 5);

	}
	else if (dir == DIRECTION_D) {
 23a:	c3 30       	cpi	r28, 0x03	; 3
 23c:	09 f0       	breq	.+2      	; 0x240 <draw_arrow+0x1e>
 23e:	70 c0       	rjmp	.+224    	; 0x320 <draw_arrow+0xfe>
 240:	1c c0       	rjmp	.+56     	; 0x27a <draw_arrow+0x58>

void draw_arrow(byte dir, byte clr) {
	setcolor(clr);
	if (dir == DIRECTION_A) {
		//POINTS UP AND LEFT
		drawpoint(0, 0);
 242:	6c 2f       	mov	r22, r28
 244:	8c 2f       	mov	r24, r28
 246:	26 d5       	rcall	.+2636   	; 0xc94 <drawpoint>
		drawpoint(0, 1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8c 2f       	mov	r24, r28
 24c:	23 d5       	rcall	.+2630   	; 0xc94 <drawpoint>
		drawpoint(0, 2);
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	8c 2f       	mov	r24, r28
 252:	20 d5       	rcall	.+2624   	; 0xc94 <drawpoint>
		drawpoint(1, 0);
 254:	6c 2f       	mov	r22, r28
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	1d d5       	rcall	.+2618   	; 0xc94 <drawpoint>
		drawpoint(2, 0);
 25a:	6c 2f       	mov	r22, r28
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	1a d5       	rcall	.+2612   	; 0xc94 <drawpoint>
		drawpoint(1, 1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	86 2f       	mov	r24, r22
 264:	17 d5       	rcall	.+2606   	; 0xc94 <drawpoint>
		drawpoint(2, 2);
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	86 2f       	mov	r24, r22
 26a:	14 d5       	rcall	.+2600   	; 0xc94 <drawpoint>
		drawpoint(3, 3);
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	86 2f       	mov	r24, r22
 270:	11 d5       	rcall	.+2594   	; 0xc94 <drawpoint>
		drawpoint(4, 4);
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	86 2f       	mov	r24, r22
		drawpoint(5, 0);
		drawpoint(4, 0);
		drawpoint(5, 1);
		drawpoint(4, 2);
		drawpoint(3, 3);
		drawpoint(2, 4);
 276:	0e d5       	rcall	.+2588   	; 0xc94 <drawpoint>
 278:	53 c0       	rjmp	.+166    	; 0x320 <draw_arrow+0xfe>

	}
	else if (dir == DIRECTION_D) {

		//POINTS UP AND RIGHT
		drawpoint(6, 0);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0a d5       	rcall	.+2580   	; 0xc94 <drawpoint>
		drawpoint(6, 1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	07 d5       	rcall	.+2574   	; 0xc94 <drawpoint>
		drawpoint(6, 2);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	04 d5       	rcall	.+2568   	; 0xc94 <drawpoint>
		drawpoint(5, 0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	01 d5       	rcall	.+2562   	; 0xc94 <drawpoint>
		drawpoint(4, 0);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	fe d4       	rcall	.+2556   	; 0xc94 <drawpoint>
		drawpoint(5, 1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	fb d4       	rcall	.+2550   	; 0xc94 <drawpoint>
		drawpoint(4, 2);
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	f8 d4       	rcall	.+2544   	; 0xc94 <drawpoint>
		drawpoint(3, 3);
 2a4:	6c 2f       	mov	r22, r28
 2a6:	8c 2f       	mov	r24, r28
 2a8:	f5 d4       	rcall	.+2538   	; 0xc94 <drawpoint>
		drawpoint(2, 4);
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	f2 d4       	rcall	.+2532   	; 0xc94 <drawpoint>
 2b0:	37 c0       	rjmp	.+110    	; 0x320 <draw_arrow+0xfe>
		drawpoint(4, 4);
		//drawpoint(5, 5);
	}
	else if (dir == DIRECTION_B) {
		//POINTS DOWN AND LEFT
		drawpoint(0, 4);
 2b2:	64 e0       	ldi	r22, 0x04	; 4
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	ee d4       	rcall	.+2524   	; 0xc94 <drawpoint>
		drawpoint(0, 3);
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	eb d4       	rcall	.+2518   	; 0xc94 <drawpoint>
		drawpoint(0, 2);
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	e8 d4       	rcall	.+2512   	; 0xc94 <drawpoint>
		drawpoint(1, 4);
 2c4:	64 e0       	ldi	r22, 0x04	; 4
 2c6:	8c 2f       	mov	r24, r28
 2c8:	e5 d4       	rcall	.+2506   	; 0xc94 <drawpoint>
		drawpoint(2, 4);
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	e2 d4       	rcall	.+2500   	; 0xc94 <drawpoint>
		drawpoint(1, 3);
 2d0:	63 e0       	ldi	r22, 0x03	; 3
 2d2:	8c 2f       	mov	r24, r28
 2d4:	df d4       	rcall	.+2494   	; 0xc94 <drawpoint>
		drawpoint(2, 2);
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	86 2f       	mov	r24, r22
 2da:	dc d4       	rcall	.+2488   	; 0xc94 <drawpoint>
		drawpoint(3, 1);
 2dc:	6c 2f       	mov	r22, r28
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	d9 d4       	rcall	.+2482   	; 0xc94 <drawpoint>
		drawpoint(4, 0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	84 e0       	ldi	r24, 0x04	; 4
		drawpoint(5, 0);
		drawpoint(4, 0);
		drawpoint(5, 1);
		drawpoint(4, 2);
		drawpoint(3, 3);
		drawpoint(2, 4);
 2e6:	d6 d4       	rcall	.+2476   	; 0xc94 <drawpoint>
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <draw_arrow+0xfe>
		drawpoint(4, 0);
		//drawpoint(0, 5);
	}
	else if (dir == DIRECTION_C) {
		//POINTS DOWN AND RIGHT
		drawpoint(6, 4);
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	d2 d4       	rcall	.+2468   	; 0xc94 <drawpoint>
		drawpoint(6, 3);
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	cf d4       	rcall	.+2462   	; 0xc94 <drawpoint>
		drawpoint(6, 2);
 2f6:	6c 2f       	mov	r22, r28
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	cc d4       	rcall	.+2456   	; 0xc94 <drawpoint>
		drawpoint(5, 4);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	c9 d4       	rcall	.+2450   	; 0xc94 <drawpoint>
		drawpoint(4, 4);
 302:	64 e0       	ldi	r22, 0x04	; 4
 304:	86 2f       	mov	r24, r22
 306:	c6 d4       	rcall	.+2444   	; 0xc94 <drawpoint>
		drawpoint(5, 3);
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	c3 d4       	rcall	.+2438   	; 0xc94 <drawpoint>
		drawpoint(4, 2);
 30e:	6c 2f       	mov	r22, r28
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	c0 d4       	rcall	.+2432   	; 0xc94 <drawpoint>
		drawpoint(3, 1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	bd d4       	rcall	.+2426   	; 0xc94 <drawpoint>
		drawpoint(2, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	8c 2f       	mov	r24, r28
		drawpoint(5, 0);
		drawpoint(4, 0);
		drawpoint(5, 1);
		drawpoint(4, 2);
		drawpoint(3, 3);
		drawpoint(2, 4);
 31e:	ba d4       	rcall	.+2420   	; 0xc94 <drawpoint>
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <show_next_arrow>:
		//drawpoint(0, 5);
	}
}

void show_next_arrow(int cnt) {
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
	byte *noise;
	byte clr;
	byte dir = arrows[cnt];
 328:	fc 01       	movw	r30, r24
 32a:	ee 59       	subi	r30, 0x9E	; 158
 32c:	fd 4f       	sbci	r31, 0xFD	; 253
 32e:	80 81       	ld	r24, Z

	if (dir == DIRECTION_A) {
 330:	88 23       	and	r24, r24
 332:	19 f4       	brne	.+6      	; 0x33a <show_next_arrow+0x16>
		noise = DIRECTION_A_NOISE;
 334:	c0 e3       	ldi	r28, 0x30	; 48
 336:	d1 e0       	ldi	r29, 0x01	; 1
 338:	0e c0       	rjmp	.+28     	; 0x356 <show_next_arrow+0x32>
	}
	else if (dir == DIRECTION_B) {
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	39 f0       	breq	.+14     	; 0x34c <show_next_arrow+0x28>
		noise = DIRECTION_B_NOISE;
	}
	else if (dir == DIRECTION_C) {
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	41 f0       	breq	.+16     	; 0x352 <show_next_arrow+0x2e>
		noise = DIRECTION_C_NOISE;
	}
	if (dir == DIRECTION_D) {
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	41 f4       	brne	.+16     	; 0x356 <show_next_arrow+0x32>
		noise = DIRECTION_D_NOISE;
 346:	c7 e2       	ldi	r28, 0x27	; 39
 348:	d1 e0       	ldi	r29, 0x01	; 1
 34a:	05 c0       	rjmp	.+10     	; 0x356 <show_next_arrow+0x32>

	if (dir == DIRECTION_A) {
		noise = DIRECTION_A_NOISE;
	}
	else if (dir == DIRECTION_B) {
		noise = DIRECTION_B_NOISE;
 34c:	cd e2       	ldi	r28, 0x2D	; 45
 34e:	d1 e0       	ldi	r29, 0x01	; 1
 350:	02 c0       	rjmp	.+4      	; 0x356 <show_next_arrow+0x32>
	}
	else if (dir == DIRECTION_C) {
		noise = DIRECTION_C_NOISE;
 352:	ca e2       	ldi	r28, 0x2A	; 42
 354:	d1 e0       	ldi	r29, 0x01	; 1
	if (dir == DIRECTION_D) {
		noise = DIRECTION_D_NOISE;
	}
	
	
	    draw_arrow(arrows[cnt], GREEN);
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	80 81       	ld	r24, Z
 35a:	63 df       	rcall	.-314    	; 0x222 <draw_arrow>
	    delay_ms(200);
 35c:	88 ec       	ldi	r24, 0xC8	; 200
 35e:	9d de       	rcall	.-710    	; 0x9a <delay_ms>
		playsong(noise);
 360:	ce 01       	movw	r24, r28
 362:	59 d5       	rcall	.+2738   	; 0xe16 <playsong>
		//waitaudio();
	    delay_ms(200);
 364:	88 ec       	ldi	r24, 0xC8	; 200
 366:	99 de       	rcall	.-718    	; 0x9a <delay_ms>
	    delay_ms(200);
 368:	88 ec       	ldi	r24, 0xC8	; 200
 36a:	97 de       	rcall	.-722    	; 0x9a <delay_ms>
	    cleardisplay();	
 36c:	83 d4       	rcall	.+2310   	; 0xc74 <cleardisplay>
	    delay_ms(200);
 36e:	88 ec       	ldi	r24, 0xC8	; 200
 370:	94 de       	rcall	.-728    	; 0x9a <delay_ms>
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <startup_screen>:
	
}


void startup_screen() {
	draw_arrow(DIRECTION_A, GREEN);
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	52 df       	rcall	.-348    	; 0x222 <draw_arrow>
	delay_ms(200);
 37e:	88 ec       	ldi	r24, 0xC8	; 200
 380:	8c de       	rcall	.-744    	; 0x9a <delay_ms>
	delay_ms(200);
 382:	88 ec       	ldi	r24, 0xC8	; 200
 384:	8a de       	rcall	.-748    	; 0x9a <delay_ms>
	delay_ms(200);
 386:	88 ec       	ldi	r24, 0xC8	; 200
 388:	88 de       	rcall	.-752    	; 0x9a <delay_ms>
	cleardisplay();
 38a:	74 d4       	rcall	.+2280   	; 0xc74 <cleardisplay>
	draw_arrow(DIRECTION_B, GREEN);
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	48 df       	rcall	.-368    	; 0x222 <draw_arrow>
	delay_ms(200);
 392:	88 ec       	ldi	r24, 0xC8	; 200
 394:	82 de       	rcall	.-764    	; 0x9a <delay_ms>
	delay_ms(200);
 396:	88 ec       	ldi	r24, 0xC8	; 200
 398:	80 de       	rcall	.-768    	; 0x9a <delay_ms>
	delay_ms(200);
 39a:	88 ec       	ldi	r24, 0xC8	; 200
 39c:	7e de       	rcall	.-772    	; 0x9a <delay_ms>
	cleardisplay();
 39e:	6a d4       	rcall	.+2260   	; 0xc74 <cleardisplay>
	draw_arrow(DIRECTION_C, GREEN);
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	86 2f       	mov	r24, r22
 3a4:	3e df       	rcall	.-388    	; 0x222 <draw_arrow>
	delay_ms(200);
 3a6:	88 ec       	ldi	r24, 0xC8	; 200
 3a8:	78 de       	rcall	.-784    	; 0x9a <delay_ms>
	delay_ms(200);
 3aa:	88 ec       	ldi	r24, 0xC8	; 200
 3ac:	76 de       	rcall	.-788    	; 0x9a <delay_ms>
	delay_ms(200);
 3ae:	88 ec       	ldi	r24, 0xC8	; 200
 3b0:	74 de       	rcall	.-792    	; 0x9a <delay_ms>
	cleardisplay();
 3b2:	60 d4       	rcall	.+2240   	; 0xc74 <cleardisplay>
	draw_arrow(DIRECTION_D, GREEN);
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	34 df       	rcall	.-408    	; 0x222 <draw_arrow>
	delay_ms(200);
 3ba:	88 ec       	ldi	r24, 0xC8	; 200
 3bc:	6e de       	rcall	.-804    	; 0x9a <delay_ms>
	delay_ms(200);
 3be:	88 ec       	ldi	r24, 0xC8	; 200
 3c0:	6c de       	rcall	.-808    	; 0x9a <delay_ms>
	delay_ms(200);
 3c2:	88 ec       	ldi	r24, 0xC8	; 200
 3c4:	6a de       	rcall	.-812    	; 0x9a <delay_ms>
	cleardisplay();
 3c6:	56 d4       	rcall	.+2220   	; 0xc74 <cleardisplay>
 3c8:	08 95       	ret

000003ca <draw_digit_vert_right>:
}



void draw_digit_vert_right(int x_shift) {
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
	int col3 = 2 + x_shift;
 3ce:	8c 01       	movw	r16, r24
 3d0:	0e 5f       	subi	r16, 0xFE	; 254
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
	drawpoint(col3, 0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	80 2f       	mov	r24, r16
 3d8:	5d d4       	rcall	.+2234   	; 0xc94 <drawpoint>
	drawpoint(col3, 1);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	80 2f       	mov	r24, r16
 3de:	5a d4       	rcall	.+2228   	; 0xc94 <drawpoint>
	drawpoint(col3, 2);
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	80 2f       	mov	r24, r16
 3e4:	57 d4       	rcall	.+2222   	; 0xc94 <drawpoint>
	drawpoint(col3, 3);
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	80 2f       	mov	r24, r16
 3ea:	54 d4       	rcall	.+2216   	; 0xc94 <drawpoint>
	drawpoint(col3, 3);
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	80 2f       	mov	r24, r16
 3f0:	51 d4       	rcall	.+2210   	; 0xc94 <drawpoint>
	drawpoint(col3, 4);
 3f2:	64 e0       	ldi	r22, 0x04	; 4
 3f4:	80 2f       	mov	r24, r16
 3f6:	4e d4       	rcall	.+2204   	; 0xc94 <drawpoint>
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <draw_digit_vert_left>:
}

void draw_digit_vert_left(int x_shift) {
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	8c 01       	movw	r16, r24
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
	int col3 = 2 + x_shift;
	drawpoint(col1, 0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	46 d4       	rcall	.+2188   	; 0xc94 <drawpoint>
	drawpoint(col1, 1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	80 2f       	mov	r24, r16
 40c:	43 d4       	rcall	.+2182   	; 0xc94 <drawpoint>
	drawpoint(col1, 2);
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	80 2f       	mov	r24, r16
 412:	40 d4       	rcall	.+2176   	; 0xc94 <drawpoint>
	drawpoint(col1, 3);
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	80 2f       	mov	r24, r16
 418:	3d d4       	rcall	.+2170   	; 0xc94 <drawpoint>
	drawpoint(col1, 3);
 41a:	63 e0       	ldi	r22, 0x03	; 3
 41c:	80 2f       	mov	r24, r16
 41e:	3a d4       	rcall	.+2164   	; 0xc94 <drawpoint>
	drawpoint(col1, 4);
 420:	64 e0       	ldi	r22, 0x04	; 4
 422:	80 2f       	mov	r24, r16
 424:	37 d4       	rcall	.+2158   	; 0xc94 <drawpoint>
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <draw_digit_horiz_top>:
}


void draw_digit_horiz_top(int x_shift) {
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
 434:	8c 01       	movw	r16, r24
 436:	0f 5f       	subi	r16, 0xFF	; 255
 438:	1f 4f       	sbci	r17, 0xFF	; 255
	int col3 = 2 + x_shift;
 43a:	32 e0       	ldi	r19, 0x02	; 2
 43c:	e3 2e       	mov	r14, r19
 43e:	f1 2c       	mov	r15, r1
 440:	e8 0e       	add	r14, r24
 442:	f9 1e       	adc	r15, r25
	drawpoint(col1, 0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	26 d4       	rcall	.+2124   	; 0xc94 <drawpoint>
	drawpoint(col2, 0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	80 2f       	mov	r24, r16
 44c:	23 d4       	rcall	.+2118   	; 0xc94 <drawpoint>
	drawpoint(col3, 0);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8e 2d       	mov	r24, r14
 452:	20 d4       	rcall	.+2112   	; 0xc94 <drawpoint>
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	08 95       	ret

0000045e <draw_digit_horiz_mid>:
}


void draw_digit_horiz_mid(int x_shift) {
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
 466:	8c 01       	movw	r16, r24
 468:	0f 5f       	subi	r16, 0xFF	; 255
 46a:	1f 4f       	sbci	r17, 0xFF	; 255
	int col3 = 2 + x_shift;
 46c:	42 e0       	ldi	r20, 0x02	; 2
 46e:	e4 2e       	mov	r14, r20
 470:	f1 2c       	mov	r15, r1
 472:	e8 0e       	add	r14, r24
 474:	f9 1e       	adc	r15, r25
	drawpoint(col1, 2);
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	0d d4       	rcall	.+2074   	; 0xc94 <drawpoint>
	drawpoint(col2, 2);
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	80 2f       	mov	r24, r16
 47e:	0a d4       	rcall	.+2068   	; 0xc94 <drawpoint>
	drawpoint(col3, 2);
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	8e 2d       	mov	r24, r14
 484:	07 d4       	rcall	.+2062   	; 0xc94 <drawpoint>
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	08 95       	ret

00000490 <draw_digit_horiz_bot>:
}
void draw_digit_horiz_bot(int x_shift) {
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
 498:	8c 01       	movw	r16, r24
 49a:	0f 5f       	subi	r16, 0xFF	; 255
 49c:	1f 4f       	sbci	r17, 0xFF	; 255
	int col3 = 2 + x_shift;
 49e:	52 e0       	ldi	r21, 0x02	; 2
 4a0:	e5 2e       	mov	r14, r21
 4a2:	f1 2c       	mov	r15, r1
 4a4:	e8 0e       	add	r14, r24
 4a6:	f9 1e       	adc	r15, r25
	drawpoint(col1, 4);
 4a8:	64 e0       	ldi	r22, 0x04	; 4
 4aa:	f4 d3       	rcall	.+2024   	; 0xc94 <drawpoint>
	drawpoint(col2, 4);
 4ac:	64 e0       	ldi	r22, 0x04	; 4
 4ae:	80 2f       	mov	r24, r16
 4b0:	f1 d3       	rcall	.+2018   	; 0xc94 <drawpoint>
	drawpoint(col3, 4);
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	8e 2d       	mov	r24, r14
 4b6:	ee d3       	rcall	.+2012   	; 0xc94 <drawpoint>
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	08 95       	ret

000004c2 <draw_number>:
}


void draw_number(int number, int x_shift) {
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	eb 01       	movw	r28, r22
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
 4d0:	8b 01       	movw	r16, r22
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
	int col3 = 2 + x_shift;
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	e6 2e       	mov	r14, r22
 4da:	f1 2c       	mov	r15, r1
 4dc:	ec 0e       	add	r14, r28
 4de:	fd 1e       	adc	r15, r29
	
	if (number == 0) {
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	69 f1       	breq	.+90     	; 0x53e <__stack+0x3f>
		draw_digit_vert_left(x_shift);
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_top(x_shift);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 1) {
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	91 05       	cpc	r25, r1
 4e8:	d1 f1       	breq	.+116    	; 0x55e <__stack+0x5f>
		drawpoint(col2, 1);
		drawpoint(col2, 2);
		drawpoint(col2, 3);
		drawpoint(col2, 4);
	}
	else if (number == 2) {
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	91 05       	cpc	r25, r1
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <draw_number+0x30>
 4f0:	46 c0       	rjmp	.+140    	; 0x57e <__stack+0x7f>
		drawpoint(col3, 1);
		draw_digit_horiz_mid(x_shift);
		drawpoint(col1, 3);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 3) {
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	91 05       	cpc	r25, r1
 4f6:	61 f1       	breq	.+88     	; 0x550 <__stack+0x51>
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_top(x_shift);
		draw_digit_horiz_mid(x_shift);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 4) {
 4f8:	84 30       	cpi	r24, 0x04	; 4
 4fa:	91 05       	cpc	r25, r1
 4fc:	09 f4       	brne	.+2      	; 0x500 <__stack+0x1>
 4fe:	4a c0       	rjmp	.+148    	; 0x594 <__stack+0x95>
		drawpoint(col1, 1);
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_mid(x_shift);

	}
	else if (number == 5) {
 500:	85 30       	cpi	r24, 0x05	; 5
 502:	91 05       	cpc	r25, r1
 504:	09 f4       	brne	.+2      	; 0x508 <__stack+0x9>
 506:	51 c0       	rjmp	.+162    	; 0x5aa <__stack+0xab>
		drawpoint(col1, 1);
		draw_digit_horiz_mid(x_shift);
		drawpoint(col3, 3);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 6) {
 508:	86 30       	cpi	r24, 0x06	; 6
 50a:	91 05       	cpc	r25, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <__stack+0x11>
 50e:	58 c0       	rjmp	.+176    	; 0x5c0 <__stack+0xc1>
		draw_digit_horiz_mid(x_shift);
		drawpoint(col1, 3);
		drawpoint(col3, 3);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 7) {
 510:	87 30       	cpi	r24, 0x07	; 7
 512:	91 05       	cpc	r25, r1
 514:	09 f4       	brne	.+2      	; 0x518 <__stack+0x19>
 516:	5e c0       	rjmp	.+188    	; 0x5d4 <__stack+0xd5>
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_top(x_shift);
	}
	else if (number == 8) {
 518:	88 30       	cpi	r24, 0x08	; 8
 51a:	91 05       	cpc	r25, r1
 51c:	b9 f0       	breq	.+46     	; 0x54c <__stack+0x4d>
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_top(x_shift);
		draw_digit_horiz_mid(x_shift);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 9) {
 51e:	09 97       	sbiw	r24, 0x09	; 9
 520:	09 f0       	breq	.+2      	; 0x524 <__stack+0x25>
 522:	5c c0       	rjmp	.+184    	; 0x5dc <__stack+0xdd>
		draw_digit_vert_left(x_shift);
 524:	ce 01       	movw	r24, r28
 526:	6b df       	rcall	.-298    	; 0x3fe <draw_digit_vert_left>
		drawpoint(col1, 1);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	8c 2f       	mov	r24, r28
 52c:	b3 d3       	rcall	.+1894   	; 0xc94 <drawpoint>
		drawpoint(col3, 1);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	8e 2d       	mov	r24, r14
 532:	b0 d3       	rcall	.+1888   	; 0xc94 <drawpoint>
		draw_digit_horiz_mid(x_shift);
 534:	ce 01       	movw	r24, r28
 536:	93 df       	rcall	.-218    	; 0x45e <draw_digit_horiz_mid>
		draw_digit_horiz_bot(x_shift);
 538:	ce 01       	movw	r24, r28
 53a:	aa df       	rcall	.-172    	; 0x490 <draw_digit_horiz_bot>
 53c:	4f c0       	rjmp	.+158    	; 0x5dc <__stack+0xdd>
	int col1 = 0 + x_shift;
	int col2 = 1 + x_shift;
	int col3 = 2 + x_shift;
	
	if (number == 0) {
		draw_digit_vert_left(x_shift);
 53e:	ce 01       	movw	r24, r28
 540:	5e df       	rcall	.-324    	; 0x3fe <draw_digit_vert_left>
		draw_digit_vert_right(x_shift);
 542:	ce 01       	movw	r24, r28
 544:	42 df       	rcall	.-380    	; 0x3ca <draw_digit_vert_right>
		draw_digit_horiz_top(x_shift);
 546:	ce 01       	movw	r24, r28
 548:	71 df       	rcall	.-286    	; 0x42c <draw_digit_horiz_top>
 54a:	f6 cf       	rjmp	.-20     	; 0x538 <__stack+0x39>
	else if (number == 7) {
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_top(x_shift);
	}
	else if (number == 8) {
		draw_digit_vert_left(x_shift);
 54c:	ce 01       	movw	r24, r28
 54e:	57 df       	rcall	.-338    	; 0x3fe <draw_digit_vert_left>
		draw_digit_vert_right(x_shift);
 550:	ce 01       	movw	r24, r28
 552:	3b df       	rcall	.-394    	; 0x3ca <draw_digit_vert_right>
		draw_digit_horiz_top(x_shift);
 554:	ce 01       	movw	r24, r28
 556:	6a df       	rcall	.-300    	; 0x42c <draw_digit_horiz_top>
	}
	else if (number == 9) {
		draw_digit_vert_left(x_shift);
		drawpoint(col1, 1);
		drawpoint(col3, 1);
		draw_digit_horiz_mid(x_shift);
 558:	ce 01       	movw	r24, r28
 55a:	81 df       	rcall	.-254    	; 0x45e <draw_digit_horiz_mid>
 55c:	ed cf       	rjmp	.-38     	; 0x538 <__stack+0x39>
		draw_digit_vert_right(x_shift);
		draw_digit_horiz_top(x_shift);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 1) {
		drawpoint(col2, 0);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	80 2f       	mov	r24, r16
 562:	98 d3       	rcall	.+1840   	; 0xc94 <drawpoint>
		drawpoint(col2, 1);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	80 2f       	mov	r24, r16
 568:	95 d3       	rcall	.+1834   	; 0xc94 <drawpoint>
		drawpoint(col2, 2);
 56a:	62 e0       	ldi	r22, 0x02	; 2
 56c:	80 2f       	mov	r24, r16
 56e:	92 d3       	rcall	.+1828   	; 0xc94 <drawpoint>
		drawpoint(col2, 3);
 570:	63 e0       	ldi	r22, 0x03	; 3
 572:	80 2f       	mov	r24, r16
 574:	8f d3       	rcall	.+1822   	; 0xc94 <drawpoint>
		drawpoint(col2, 4);
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	80 2f       	mov	r24, r16
 57a:	8c d3       	rcall	.+1816   	; 0xc94 <drawpoint>
 57c:	2f c0       	rjmp	.+94     	; 0x5dc <__stack+0xdd>
	}
	else if (number == 2) {
		draw_digit_horiz_top(x_shift);
 57e:	ce 01       	movw	r24, r28
 580:	55 df       	rcall	.-342    	; 0x42c <draw_digit_horiz_top>
		drawpoint(col3, 1);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	8e 2d       	mov	r24, r14
 586:	86 d3       	rcall	.+1804   	; 0xc94 <drawpoint>
		draw_digit_horiz_mid(x_shift);
 588:	ce 01       	movw	r24, r28
 58a:	69 df       	rcall	.-302    	; 0x45e <draw_digit_horiz_mid>
		drawpoint(col1, 3);
 58c:	63 e0       	ldi	r22, 0x03	; 3
 58e:	8c 2f       	mov	r24, r28
	}
	else if (number == 5) {
		draw_digit_horiz_top(x_shift);
		drawpoint(col1, 1);
		draw_digit_horiz_mid(x_shift);
		drawpoint(col3, 3);
 590:	81 d3       	rcall	.+1794   	; 0xc94 <drawpoint>
 592:	d2 cf       	rjmp	.-92     	; 0x538 <__stack+0x39>
		draw_digit_horiz_top(x_shift);
		draw_digit_horiz_mid(x_shift);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 4) {
		drawpoint(col1, 0);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	8c 2f       	mov	r24, r28
 598:	7d d3       	rcall	.+1786   	; 0xc94 <drawpoint>
		drawpoint(col1, 1);
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	8c 2f       	mov	r24, r28
 59e:	7a d3       	rcall	.+1780   	; 0xc94 <drawpoint>
		draw_digit_vert_right(x_shift);
 5a0:	ce 01       	movw	r24, r28
 5a2:	13 df       	rcall	.-474    	; 0x3ca <draw_digit_vert_right>
		draw_digit_horiz_mid(x_shift);
 5a4:	ce 01       	movw	r24, r28
 5a6:	5b df       	rcall	.-330    	; 0x45e <draw_digit_horiz_mid>
 5a8:	19 c0       	rjmp	.+50     	; 0x5dc <__stack+0xdd>

	}
	else if (number == 5) {
		draw_digit_horiz_top(x_shift);
 5aa:	ce 01       	movw	r24, r28
 5ac:	3f df       	rcall	.-386    	; 0x42c <draw_digit_horiz_top>
		drawpoint(col1, 1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	8c 2f       	mov	r24, r28
 5b2:	70 d3       	rcall	.+1760   	; 0xc94 <drawpoint>
		draw_digit_horiz_mid(x_shift);
 5b4:	ce 01       	movw	r24, r28
 5b6:	53 df       	rcall	.-346    	; 0x45e <draw_digit_horiz_mid>
		drawpoint(col3, 3);
 5b8:	63 e0       	ldi	r22, 0x03	; 3
 5ba:	8e 2d       	mov	r24, r14
 5bc:	6b d3       	rcall	.+1750   	; 0xc94 <drawpoint>
 5be:	bc cf       	rjmp	.-136    	; 0x538 <__stack+0x39>
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 6) {
		draw_digit_vert_left(x_shift);
 5c0:	ce 01       	movw	r24, r28
 5c2:	1d df       	rcall	.-454    	; 0x3fe <draw_digit_vert_left>
		draw_digit_horiz_mid(x_shift);
 5c4:	ce 01       	movw	r24, r28
 5c6:	4b df       	rcall	.-362    	; 0x45e <draw_digit_horiz_mid>
		drawpoint(col1, 3);
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	8c 2f       	mov	r24, r28
 5cc:	63 d3       	rcall	.+1734   	; 0xc94 <drawpoint>
	}
	else if (number == 5) {
		draw_digit_horiz_top(x_shift);
		drawpoint(col1, 1);
		draw_digit_horiz_mid(x_shift);
		drawpoint(col3, 3);
 5ce:	63 e0       	ldi	r22, 0x03	; 3
 5d0:	8e 2d       	mov	r24, r14
 5d2:	f4 cf       	rjmp	.-24     	; 0x5bc <__stack+0xbd>
		drawpoint(col1, 3);
		drawpoint(col3, 3);
		draw_digit_horiz_bot(x_shift);
	}
	else if (number == 7) {
		draw_digit_vert_right(x_shift);
 5d4:	ce 01       	movw	r24, r28
 5d6:	f9 de       	rcall	.-526    	; 0x3ca <draw_digit_vert_right>
		draw_digit_horiz_top(x_shift);
 5d8:	ce 01       	movw	r24, r28
 5da:	28 df       	rcall	.-432    	; 0x42c <draw_digit_horiz_top>
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	08 95       	ret

000005ea <gameover_screen>:

}



void gameover_screen(int level) {
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	7c 01       	movw	r14, r24
	setcolor(RED);
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	46 d3       	rcall	.+1676   	; 0xc84 <setcolor>
	draw_number((level % 10), 4);
 5f8:	0a e0       	ldi	r16, 0x0A	; 10
 5fa:	10 e0       	ldi	r17, 0x00	; 0
 5fc:	c7 01       	movw	r24, r14
 5fe:	b8 01       	movw	r22, r16
 600:	81 d4       	rcall	.+2306   	; 0xf04 <__divmodhi4>
 602:	64 e0       	ldi	r22, 0x04	; 4
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	5d df       	rcall	.-326    	; 0x4c2 <draw_number>
	draw_number((level / 10), 0);
 608:	c7 01       	movw	r24, r14
 60a:	b8 01       	movw	r22, r16
 60c:	7b d4       	rcall	.+2294   	; 0xf04 <__divmodhi4>
 60e:	cb 01       	movw	r24, r22
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	56 df       	rcall	.-340    	; 0x4c2 <draw_number>
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	ff 90       	pop	r15
 61c:	ef 90       	pop	r14
 61e:	08 95       	ret

00000620 <main>:



int
main(void)
{
 620:	cf ef       	ldi	r28, 0xFF	; 255
 622:	d4 e0       	ldi	r29, 0x04	; 4
 624:	de bf       	out	0x3e, r29	; 62
 626:	cd bf       	out	0x3d, r28	; 61
	init_random();
 628:	db dd       	rcall	.-1098   	; 0x1e0 <init_random>
	avrinit();
 62a:	95 d2       	rcall	.+1322   	; 0xb56 <avrinit>
	int cnt;
	byte btnDown = 0;
 62c:	dd 24       	eor	r13, r13
	byte level = 1;
 62e:	f1 e0       	ldi	r31, 0x01	; 1
 630:	cf 2e       	mov	r12, r31

	arrows[0] = directions[next_random(4)];
 632:	64 e0       	ldi	r22, 0x04	; 4
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	5f dd       	rcall	.-1346   	; 0xfa <next_random>
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	fc 01       	movw	r30, r24
 642:	e6 5b       	subi	r30, 0xB6	; 182
 644:	fe 4f       	sbci	r31, 0xFE	; 254
 646:	80 81       	ld	r24, Z
 648:	80 93 62 02 	sts	0x0262, r24


	initswapbuffers();
 64c:	06 d3       	rcall	.+1548   	; 0xc5a <initswapbuffers>
	swapinterval(10);		// note: display refresh is 100hz (lower number speeds up game)
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	0c d3       	rcall	.+1560   	; 0xc6a <swapinterval>
	cleardisplay();
 652:	10 d3       	rcall	.+1568   	; 0xc74 <cleardisplay>

	start_timer1();			// this starts display refresh and audio processing
 654:	68 d2       	rcall	.+1232   	; 0xb26 <start_timer1>
	
	button_init();
 656:	8d d2       	rcall	.+1306   	; 0xb72 <button_init>

	initaudio();			// XXX eventually, we remove this!
 658:	af d3       	rcall	.+1886   	; 0xdb8 <initaudio>

	//setwavetable(WT_SINE);
	playsong(IntroSong);
 65a:	83 e3       	ldi	r24, 0x33	; 51
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	db d3       	rcall	.+1974   	; 0xe16 <playsong>

	startup_screen();
 660:	8b de       	rcall	.-746    	; 0x378 <startup_screen>

	delay_sec(1);
 662:	8c 2d       	mov	r24, r12
 664:	2b dd       	rcall	.-1450   	; 0xbc <delay_sec>

	//
	// and now, the game
	//
nextlevel:
    cleardisplay();
 666:	06 d3       	rcall	.+1548   	; 0xc74 <cleardisplay>
    for(cnt=0; cnt<level; cnt++) {
 668:	c0 e0       	ldi	r28, 0x00	; 0
 66a:	d0 e0       	ldi	r29, 0x00	; 0
 66c:	ec 2c       	mov	r14, r12
 66e:	ff 24       	eor	r15, r15
 670:	1e 14       	cp	r1, r14
 672:	1f 04       	cpc	r1, r15
 674:	34 f4       	brge	.+12     	; 0x682 <main+0x62>
		show_next_arrow(cnt);
 676:	ce 01       	movw	r24, r28
 678:	55 de       	rcall	.-854    	; 0x324 <show_next_arrow>
	//
	// and now, the game
	//
nextlevel:
    cleardisplay();
    for(cnt=0; cnt<level; cnt++) {
 67a:	21 96       	adiw	r28, 0x01	; 1
 67c:	ce 15       	cp	r28, r14
 67e:	df 05       	cpc	r29, r15
 680:	d4 f3       	brlt	.-12     	; 0x676 <main+0x56>
		show_next_arrow(cnt);
    }
    
    cnt = 0;
 682:	c0 e0       	ldi	r28, 0x00	; 0
 684:	d0 e0       	ldi	r29, 0x00	; 0
 686:	e2 e6       	ldi	r30, 0x62	; 98
 688:	ae 2e       	mov	r10, r30
 68a:	e2 e0       	ldi	r30, 0x02	; 2
 68c:	be 2e       	mov	r11, r30
 68e:	ae 0c       	add	r10, r14
 690:	bf 1c       	adc	r11, r15
 692:	02 e6       	ldi	r16, 0x62	; 98
 694:	12 e0       	ldi	r17, 0x02	; 2

	while(1) {

		cleardisplay();
 696:	ee d2       	rcall	.+1500   	; 0xc74 <cleardisplay>
		handlebuttons();
 698:	a1 d2       	rcall	.+1346   	; 0xbdc <handlebuttons>
		
		
		if (!btnDown) {
 69a:	dd 20       	and	r13, r13
 69c:	09 f0       	breq	.+2      	; 0x6a0 <main+0x80>
 69e:	44 c0       	rjmp	.+136    	; 0x728 <main+0x108>

			if (ButtonA || ButtonB || ButtonC || ButtonD) {
 6a0:	90 91 e4 02 	lds	r25, 0x02E4
 6a4:	99 23       	and	r25, r25
 6a6:	61 f4       	brne	.+24     	; 0x6c0 <main+0xa0>
 6a8:	80 91 cd 02 	lds	r24, 0x02CD
 6ac:	88 23       	and	r24, r24
 6ae:	41 f4       	brne	.+16     	; 0x6c0 <main+0xa0>
 6b0:	80 91 cc 02 	lds	r24, 0x02CC
 6b4:	88 23       	and	r24, r24
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <main+0xa0>
 6b8:	80 91 e8 02 	lds	r24, 0x02E8
 6bc:	88 23       	and	r24, r24
 6be:	29 f0       	breq	.+10     	; 0x6ca <main+0xaa>
				btnDown = 1;			
 6c0:	71 e0       	ldi	r23, 0x01	; 1
 6c2:	d7 2e       	mov	r13, r23
			}

	
			if (ButtonA) {
 6c4:	99 23       	and	r25, r25
 6c6:	09 f0       	breq	.+2      	; 0x6ca <main+0xaa>
 6c8:	7d c0       	rjmp	.+250    	; 0x7c4 <main+0x1a4>
				else {
					goto gameover;
				}
	
			}
			if (ButtonB) {
 6ca:	80 91 cd 02 	lds	r24, 0x02CD
 6ce:	88 23       	and	r24, r24
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0xb4>
 6d2:	40 c0       	rjmp	.+128    	; 0x754 <main+0x134>
					goto gameover;
				}
	
			}
	
			if (ButtonC) {
 6d4:	80 91 cc 02 	lds	r24, 0x02CC
 6d8:	88 23       	and	r24, r24
 6da:	09 f0       	breq	.+2      	; 0x6de <main+0xbe>
 6dc:	4f c0       	rjmp	.+158    	; 0x77c <main+0x15c>
				else {
					goto gameover;
				}
	
			}
			if (ButtonD) {
 6de:	80 91 e8 02 	lds	r24, 0x02E8
 6e2:	88 23       	and	r24, r24
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <main+0xc8>
 6e6:	5e c0       	rjmp	.+188    	; 0x7a4 <main+0x184>
			
			}
			

		
			if (cnt == level) {
 6e8:	ec 16       	cp	r14, r28
 6ea:	fd 06       	cpc	r15, r29
 6ec:	a1 f6       	brne	.-88     	; 0x696 <main+0x76>
				if (level == 99) {
 6ee:	f3 e6       	ldi	r31, 0x63	; 99
 6f0:	cf 16       	cp	r12, r31
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <main+0xd6>
 6f4:	7f c0       	rjmp	.+254    	; 0x7f4 <main+0x1d4>
					goto gamewin;
				}
				cleardisplay();
 6f6:	be d2       	rcall	.+1404   	; 0xc74 <cleardisplay>
				delay_ms(200);
 6f8:	88 ec       	ldi	r24, 0xC8	; 200
 6fa:	cf dc       	rcall	.-1634   	; 0x9a <delay_ms>
				playsong(CORRECT_NOISE);
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	8a d3       	rcall	.+1812   	; 0xe16 <playsong>
				level++;
 702:	c3 94       	inc	r12
				arrows[cnt] = directions[next_random(4)];
 704:	64 e0       	ldi	r22, 0x04	; 4
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	f6 dc       	rcall	.-1556   	; 0xfa <next_random>
 70e:	dc 01       	movw	r26, r24
 710:	cb 01       	movw	r24, r22
 712:	fc 01       	movw	r30, r24
 714:	e6 5b       	subi	r30, 0xB6	; 182
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	80 81       	ld	r24, Z
 71a:	f5 01       	movw	r30, r10
 71c:	80 83       	st	Z, r24
				delay_ms(200);
 71e:	88 ec       	ldi	r24, 0xC8	; 200
 720:	bc dc       	rcall	.-1672   	; 0x9a <delay_ms>
				delay_ms(200);
 722:	88 ec       	ldi	r24, 0xC8	; 200
 724:	ba dc       	rcall	.-1676   	; 0x9a <delay_ms>
 726:	9f cf       	rjmp	.-194    	; 0x666 <main+0x46>
				goto nextlevel;
			}

		}
		else {
			if (!ButtonA && !ButtonB && !ButtonC && !ButtonD) {
 728:	80 91 e4 02 	lds	r24, 0x02E4
 72c:	88 23       	and	r24, r24
 72e:	09 f0       	breq	.+2      	; 0x732 <main+0x112>
 730:	b2 cf       	rjmp	.-156    	; 0x696 <main+0x76>
 732:	80 91 cd 02 	lds	r24, 0x02CD
 736:	88 23       	and	r24, r24
 738:	09 f0       	breq	.+2      	; 0x73c <main+0x11c>
 73a:	ad cf       	rjmp	.-166    	; 0x696 <main+0x76>
 73c:	80 91 cc 02 	lds	r24, 0x02CC
 740:	88 23       	and	r24, r24
 742:	09 f0       	breq	.+2      	; 0x746 <main+0x126>
 744:	a8 cf       	rjmp	.-176    	; 0x696 <main+0x76>
 746:	80 91 e8 02 	lds	r24, 0x02E8
 74a:	88 23       	and	r24, r24
 74c:	09 f0       	breq	.+2      	; 0x750 <main+0x130>
 74e:	a3 cf       	rjmp	.-186    	; 0x696 <main+0x76>
				btnDown = 0;
 750:	d8 2e       	mov	r13, r24
 752:	a1 cf       	rjmp	.-190    	; 0x696 <main+0x76>
					goto gameover;
				}
	
			}
			if (ButtonB) {
				draw_arrow(DIRECTION_B, YELLOW);
 754:	63 e0       	ldi	r22, 0x03	; 3
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	64 dd       	rcall	.-1336   	; 0x222 <draw_arrow>
				playsong(DIRECTION_B_NOISE);
 75a:	8d e2       	ldi	r24, 0x2D	; 45
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	5b d3       	rcall	.+1718   	; 0xe16 <playsong>
				delay_ms(100);
 760:	84 e6       	ldi	r24, 0x64	; 100
 762:	9b dc       	rcall	.-1738   	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_B) {
 764:	f8 01       	movw	r30, r16
 766:	80 81       	ld	r24, Z
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	e1 f5       	brne	.+120    	; 0x7e4 <main+0x1c4>
					cnt++;
 76c:	21 96       	adiw	r28, 0x01	; 1
 76e:	0f 5f       	subi	r16, 0xFF	; 255
 770:	1f 4f       	sbci	r17, 0xFF	; 255
					goto gameover;
				}
	
			}
	
			if (ButtonC) {
 772:	80 91 cc 02 	lds	r24, 0x02CC
 776:	88 23       	and	r24, r24
 778:	09 f4       	brne	.+2      	; 0x77c <main+0x15c>
 77a:	b1 cf       	rjmp	.-158    	; 0x6de <main+0xbe>
				draw_arrow(DIRECTION_C, YELLOW);
 77c:	63 e0       	ldi	r22, 0x03	; 3
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	50 dd       	rcall	.-1376   	; 0x222 <draw_arrow>
				playsong(DIRECTION_C_NOISE);
 782:	8a e2       	ldi	r24, 0x2A	; 42
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	47 d3       	rcall	.+1678   	; 0xe16 <playsong>
				delay_ms(100);
 788:	84 e6       	ldi	r24, 0x64	; 100
 78a:	87 dc       	rcall	.-1778   	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_C) {
 78c:	f8 01       	movw	r30, r16
 78e:	80 81       	ld	r24, Z
 790:	82 30       	cpi	r24, 0x02	; 2
 792:	41 f5       	brne	.+80     	; 0x7e4 <main+0x1c4>
					cnt++;
 794:	21 96       	adiw	r28, 0x01	; 1
 796:	0f 5f       	subi	r16, 0xFF	; 255
 798:	1f 4f       	sbci	r17, 0xFF	; 255
				else {
					goto gameover;
				}
	
			}
			if (ButtonD) {
 79a:	80 91 e8 02 	lds	r24, 0x02E8
 79e:	88 23       	and	r24, r24
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <main+0x184>
 7a2:	a2 cf       	rjmp	.-188    	; 0x6e8 <main+0xc8>
				draw_arrow(DIRECTION_D, YELLOW);
 7a4:	63 e0       	ldi	r22, 0x03	; 3
 7a6:	86 2f       	mov	r24, r22
 7a8:	3c dd       	rcall	.-1416   	; 0x222 <draw_arrow>
				playsong(DIRECTION_D_NOISE);
 7aa:	87 e2       	ldi	r24, 0x27	; 39
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	33 d3       	rcall	.+1638   	; 0xe16 <playsong>
				delay_ms(100);
 7b0:	84 e6       	ldi	r24, 0x64	; 100
 7b2:	73 dc       	rcall	.-1818   	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_D) {
 7b4:	f8 01       	movw	r30, r16
 7b6:	80 81       	ld	r24, Z
 7b8:	83 30       	cpi	r24, 0x03	; 3
 7ba:	a1 f4       	brne	.+40     	; 0x7e4 <main+0x1c4>
					cnt++;
 7bc:	21 96       	adiw	r28, 0x01	; 1
 7be:	0f 5f       	subi	r16, 0xFF	; 255
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	92 cf       	rjmp	.-220    	; 0x6e8 <main+0xc8>
				btnDown = 1;			
			}

	
			if (ButtonA) {
				draw_arrow(DIRECTION_A, YELLOW);
 7c4:	63 e0       	ldi	r22, 0x03	; 3
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	2c dd       	rcall	.-1448   	; 0x222 <draw_arrow>
				playsong(DIRECTION_A_NOISE);
 7ca:	80 e3       	ldi	r24, 0x30	; 48
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	23 d3       	rcall	.+1606   	; 0xe16 <playsong>
				delay_ms(100);
 7d0:	84 e6       	ldi	r24, 0x64	; 100
 7d2:	63 dc       	rcall	.-1850   	; 0x9a <delay_ms>
				if (arrows[cnt] == DIRECTION_A) {
 7d4:	f8 01       	movw	r30, r16
 7d6:	80 81       	ld	r24, Z
 7d8:	88 23       	and	r24, r24
 7da:	21 f4       	brne	.+8      	; 0x7e4 <main+0x1c4>
					cnt++;
 7dc:	21 96       	adiw	r28, 0x01	; 1
 7de:	0f 5f       	subi	r16, 0xFF	; 255
 7e0:	1f 4f       	sbci	r17, 0xFF	; 255
 7e2:	73 cf       	rjmp	.-282    	; 0x6ca <main+0xaa>
	gameover_screen(level);
	return (0);


gameover:
	cleardisplay();
 7e4:	47 d2       	rcall	.+1166   	; 0xc74 <cleardisplay>
	delay_ms(200);
 7e6:	88 ec       	ldi	r24, 0xC8	; 200
 7e8:	58 dc       	rcall	.-1872   	; 0x9a <delay_ms>
	delay_ms(200);
 7ea:	88 ec       	ldi	r24, 0xC8	; 200
 7ec:	56 dc       	rcall	.-1876   	; 0x9a <delay_ms>
	playsong(TapsSong);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	03 c0       	rjmp	.+6      	; 0x7fa <main+0x1da>
		

    }

gamewin:
	cleardisplay();
 7f4:	3f d2       	rcall	.+1150   	; 0xc74 <cleardisplay>
	//do something;
	playsong(WIN_NOISE);
 7f6:	8d e0       	ldi	r24, 0x0D	; 13
 7f8:	91 e0       	ldi	r25, 0x01	; 1

gameover:
	cleardisplay();
	delay_ms(200);
	delay_ms(200);
	playsong(TapsSong);
 7fa:	0d d3       	rcall	.+1562   	; 0xe16 <playsong>
	gameover_screen(level);
 7fc:	c7 01       	movw	r24, r14
 7fe:	f5 de       	rcall	.-534    	; 0x5ea <gameover_screen>
	return (0);
}
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	c8 c3       	rjmp	.+1936   	; 0xf96 <_exit>

00000806 <do_audio_isr>:

    // The PWM value is loaded into the timer compare register at the beginning of the ISR if we are playing a song.
    // This PWM value was calculated in the previous pass through the ISR.

    // turn off audio if we have played the last note in the song table in the last pass through the ISR
    if ( CurNote == N_END ) {                  // if we reached the end of the song table
 806:	80 91 c9 02 	lds	r24, 0x02C9
 80a:	88 23       	and	r24, r24
 80c:	39 f4       	brne	.+14     	; 0x81c <do_audio_isr+0x16>
        SongPlayFlag = 0;                 // stop playing song when reach end of song table    
 80e:	80 93 e5 02 	sts	0x02E5, r24
        TCCR1A &= ~_BV(COM1A1);           // turn off audio by turning off compare
 812:	80 91 80 00 	lds	r24, 0x0080
 816:	8f 77       	andi	r24, 0x7F	; 127
 818:	80 93 80 00 	sts	0x0080, r24
        //CurNote = 0;
    }

    // if we are playing a song, then calculate the PWM value to play the next time we get into the ISR
    if (SongPlayFlag) {          // only handle audio if we're playing a song (SongPlayFlag is set by main to start playing audio, and it is cleared by ISR when all events in active song table are completed)
 81c:	80 91 e5 02 	lds	r24, 0x02E5
 820:	88 23       	and	r24, r24
 822:	09 f4       	brne	.+2      	; 0x826 <do_audio_isr+0x20>
 824:	b9 c0       	rjmp	.+370    	; 0x998 <do_audio_isr+0x192>

        // if the Note to play is a Rest, then turn the speaker off
        if ( CurNote == N_REST )
 826:	80 91 c9 02 	lds	r24, 0x02C9
 82a:	8f 3f       	cpi	r24, 0xFF	; 255
 82c:	09 f4       	brne	.+2      	; 0x830 <do_audio_isr+0x2a>
 82e:	cf c0       	rjmp	.+414    	; 0x9ce <do_audio_isr+0x1c8>
            TCCR1A &= ~_BV(COM1A1);  // turn off audio by turning off compare
        // otherwise, start playing the note by putting the PWM value in the timer compare register, and turing on the speaker
        else {
            TCCR1A |= _BV(COM1A1);   // make sure audio is turned on by turning on compare reg
 830:	80 91 80 00 	lds	r24, 0x0080
 834:	80 68       	ori	r24, 0x80	; 128
 836:	80 93 80 00 	sts	0x0080, r24
            OCR1A = PWMval;          // set the PWM time to next value (that was calculated on the previous pass through the ISR)
 83a:	80 91 e1 02 	lds	r24, 0x02E1
 83e:	90 91 e2 02 	lds	r25, 0x02E2
 842:	90 93 89 00 	sts	0x0089, r25
 846:	80 93 88 00 	sts	0x0088, r24
        }

        // calculate the next PWM value (this value will be used next time we get a timer interrrupt)
    
        // first, get the two values from the wavetable that we'll interpolating between
        Wptr2 = WtabCount.integ + WtabDelta.integ;
 84a:	50 91 de 02 	lds	r21, 0x02DE
 84e:	40 91 c7 02 	lds	r20, 0x02C7
 852:	65 2f       	mov	r22, r21
 854:	64 0f       	add	r22, r20
 856:	71 2d       	mov	r23, r1
 858:	71 1d       	adc	r23, r1
 85a:	db 01       	movw	r26, r22
        temp = WtabCount.fract + WtabDelta.fract;
 85c:	90 91 df 02 	lds	r25, 0x02DF
 860:	80 91 c8 02 	lds	r24, 0x02C8
 864:	69 2f       	mov	r22, r25
 866:	68 0f       	add	r22, r24
 868:	71 2d       	mov	r23, r1
 86a:	71 1d       	adc	r23, r1
 86c:	9b 01       	movw	r18, r22
        if ( temp >= 256) Wptr2 += 1;   // if both fractional parts add to 1 or more, get next byte in wavetable for Val2
 86e:	6f 3f       	cpi	r22, 0xFF	; 255
 870:	71 05       	cpc	r23, r1
 872:	11 f0       	breq	.+4      	; 0x878 <do_audio_isr+0x72>
 874:	08 f0       	brcs	.+2      	; 0x878 <do_audio_isr+0x72>
 876:	11 96       	adiw	r26, 0x01	; 1
        if ( temp > 0) Wptr2 += 1;      // if there is a fractional part, get next byte in wavetable for Val2
 878:	21 15       	cp	r18, r1
 87a:	31 05       	cpc	r19, r1
 87c:	09 f0       	breq	.+2      	; 0x880 <do_audio_isr+0x7a>
 87e:	11 96       	adiw	r26, 0x01	; 1
        Wptr1 = Wptr2 - 1;              // the first value is always the byte before the second value
 880:	cd 01       	movw	r24, r26
 882:	01 97       	sbiw	r24, 0x01	; 1
        if ( Wptr2 >= WTABSIZE) Wptr2 -= WTABSIZE;  // wrap around to the beginning of the wavetable if we reached the end of it
 884:	a0 32       	cpi	r26, 0x20	; 32
 886:	b1 05       	cpc	r27, r1
 888:	08 f0       	brcs	.+2      	; 0x88c <do_audio_isr+0x86>
 88a:	90 97       	sbiw	r26, 0x20	; 32
        if ( Wptr1 >= WTABSIZE) Wptr1 -= WTABSIZE;  // wrap around to the beginning of the wavetable if we reached the end of it
 88c:	80 32       	cpi	r24, 0x20	; 32
 88e:	91 05       	cpc	r25, r1
 890:	08 f0       	brcs	.+2      	; 0x894 <do_audio_isr+0x8e>
 892:	80 97       	sbiw	r24, 0x20	; 32
        WtabVal2 = wavPtr[Wptr2];       // get the second value from the wavetable
 894:	e0 91 cf 02 	lds	r30, 0x02CF
 898:	f0 91 d0 02 	lds	r31, 0x02D0
 89c:	ae 0f       	add	r26, r30
 89e:	bf 1f       	adc	r27, r31
 8a0:	6c 91       	ld	r22, X
        WtabVal1 = wavPtr[Wptr1];       // get the first value from the wavetable
 8a2:	e8 0f       	add	r30, r24
 8a4:	f9 1f       	adc	r31, r25
 8a6:	e0 81       	ld	r30, Z
    
        // increment the Count by the Delta (fixed-point math)
        WtabCount.integ += WtabDelta.integ;
 8a8:	85 2f       	mov	r24, r21
 8aa:	84 0f       	add	r24, r20
        temp = WtabCount.fract + WtabDelta.fract;  // we need to put this value in "temp" since "temp" is an int (16-bit value) and the fract parts of WtabCount and WtabDelta are 8-bit values
        // if the fractional part became 1 or beyond, then increment the integ part and correct the fractional part
        if ( temp >= 256 ) {                       // (256 is the equivalent of "1" for the fractional part)
 8ac:	2f 3f       	cpi	r18, 0xFF	; 255
 8ae:	31 05       	cpc	r19, r1
 8b0:	21 f0       	breq	.+8      	; 0x8ba <do_audio_isr+0xb4>
 8b2:	18 f0       	brcs	.+6      	; 0x8ba <do_audio_isr+0xb4>
            WtabCount.integ += 1;
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
            temp -= 256;
 8b6:	20 50       	subi	r18, 0x00	; 0
 8b8:	31 40       	sbci	r19, 0x01	; 1
        }
        WtabCount.fract = temp;
 8ba:	20 93 df 02 	sts	0x02DF, r18
        // if the counter is beyond the end of the table, then wrap it around to the beginning of the table
        if ( WtabCount.integ >= WTABSIZE) {
 8be:	80 32       	cpi	r24, 0x20	; 32
 8c0:	08 f0       	brcs	.+2      	; 0x8c4 <do_audio_isr+0xbe>
            WtabCount.integ -= WTABSIZE;
 8c2:	80 52       	subi	r24, 0x20	; 32
 8c4:	80 93 de 02 	sts	0x02DE, r24
        // now interpolate between the two values
        // NOTE: we are limited to WtabDelta between 1.0000 and 1.996 [ i.e. integ=1, fract=(0 to 255) ]
        // this calculates the following:  
        //     if WtabVal2>WtabVal1:   PWMval = WtabVal1 + [(WtabVal2 - WtabVal1) * WtabCount]
        //     if WtabVal2<=WtabVal1:  PWMval = WtabVal1 - [(WtabVal1 - WtabVal2) * WtabCount]
        if (WtabVal2 > WtabVal1)
 8c8:	e6 17       	cp	r30, r22
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <do_audio_isr+0xc8>
 8cc:	77 c0       	rjmp	.+238    	; 0x9bc <do_audio_isr+0x1b6>
            temp = (WtabVal2 - WtabVal1) * WtabCount.fract;
 8ce:	86 2f       	mov	r24, r22
 8d0:	99 27       	eor	r25, r25
 8d2:	4e 2f       	mov	r20, r30
 8d4:	55 27       	eor	r21, r21
 8d6:	84 1b       	sub	r24, r20
 8d8:	95 0b       	sbc	r25, r21
 8da:	20 91 df 02 	lds	r18, 0x02DF
 8de:	33 27       	eor	r19, r19
        else
            temp = (WtabVal1 - WtabVal2) * WtabCount.fract;
 8e0:	28 9f       	mul	r18, r24
 8e2:	d0 01       	movw	r26, r0
 8e4:	29 9f       	mul	r18, r25
 8e6:	b0 0d       	add	r27, r0
 8e8:	38 9f       	mul	r19, r24
 8ea:	b0 0d       	add	r27, r0
 8ec:	11 24       	eor	r1, r1
        // round up if the fractional part of the result is 128 (80 hex) or more (i.e., "0.5" or more)
        if ( (temp && 0x00ff) < 0x0080 ) 
            temp = temp / 256;
 8ee:	2b 2f       	mov	r18, r27
 8f0:	33 27       	eor	r19, r19
        else
            temp = (temp / 256) + 1;
        // update PWMval
        if (WtabVal2 > WtabVal1) 
 8f2:	e6 17       	cp	r30, r22
 8f4:	08 f0       	brcs	.+2      	; 0x8f8 <do_audio_isr+0xf2>
 8f6:	51 c0       	rjmp	.+162    	; 0x99a <do_audio_isr+0x194>
            PWMval = WtabVal1 + temp;
 8f8:	42 0f       	add	r20, r18
 8fa:	53 1f       	adc	r21, r19
        else 
            PWMval = WtabVal1 - temp;
 8fc:	50 93 e2 02 	sts	0x02E2, r21
 900:	40 93 e1 02 	sts	0x02E1, r20
        if (PWMval < 0) PWMval = 0;    // PWM should never go below zero if the above math is good, but I put this check here just in case
 904:	80 91 e1 02 	lds	r24, 0x02E1
 908:	90 91 e2 02 	lds	r25, 0x02E2
 90c:	97 fd       	sbrc	r25, 7
 90e:	51 c0       	rjmp	.+162    	; 0x9b2 <do_audio_isr+0x1ac>
    
        // Wdur keeps track of the number of times through the ISR that we play a note (i.e., the duration of the sound)
        // If the duration is completed for playing this note (i.e., Wdur < 0), then we'll add a short pause after it to separate it from the next note
        if (Wdur > 0) {                // if the duration count is still above 0, then decrement it
 910:	80 91 d1 02 	lds	r24, 0x02D1
 914:	90 91 d2 02 	lds	r25, 0x02D2
 918:	00 97       	sbiw	r24, 0x00	; 0
 91a:	31 f0       	breq	.+12     	; 0x928 <do_audio_isr+0x122>
            Wdur--;
 91c:	01 97       	sbiw	r24, 0x01	; 1
 91e:	90 93 d2 02 	sts	0x02D2, r25
 922:	80 93 d1 02 	sts	0x02D1, r24
 926:	08 95       	ret
            
        } 
        else {                         // else we have finished playing this note from the wavetable
            // start a slight pause after the note (to distinguish it from the note to follow)
            if (Wnote_sep > 0) {                      // we'll keep playing no sound until we've gone through the ISR NOTE_SEP times, making a pause after playing the previously played note
 928:	80 91 e6 02 	lds	r24, 0x02E6
 92c:	90 91 e7 02 	lds	r25, 0x02E7
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	09 f0       	breq	.+2      	; 0x936 <do_audio_isr+0x130>
 934:	52 c0       	rjmp	.+164    	; 0x9da <do_audio_isr+0x1d4>
            // if we're done with note separation pause, then set up the next note to play for the next time through the ISR
            else {
            	uint16_t tmp;
				uint8_t note, dur;

                Wnote_sep = NOTE_SEP;                 // reset note separation value
 936:	88 ec       	ldi	r24, 0xC8	; 200
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	90 93 e7 02 	sts	0x02E7, r25
 93e:	80 93 e6 02 	sts	0x02E6, r24
                DDRB |= _BV(1);                       // turn SPKR (OC1A) port back on
 942:	21 9a       	sbi	0x04, 1	; 4
                //Disp[8] = 0x00;                     // XXX debug: turn off the one pixel

				// next time through the ISR we'll start playing the next note in the song table

				// note: this code is repeated inside playsong() - must match!!
				note = *songPtr++;
 944:	a0 91 e9 02 	lds	r26, 0x02E9
 948:	b0 91 ea 02 	lds	r27, 0x02EA
 94c:	4d 91       	ld	r20, X+
 94e:	b0 93 ea 02 	sts	0x02EA, r27
 952:	a0 93 e9 02 	sts	0x02E9, r26
				tmp = GETNOTEDELTA(note);
 956:	e4 2f       	mov	r30, r20
 958:	ff 27       	eor	r31, r31
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	e2 58       	subi	r30, 0x82	; 130
 960:	fe 4f       	sbci	r31, 0xFE	; 254
 962:	20 81       	ld	r18, Z
 964:	31 81       	ldd	r19, Z+1	; 0x01
				WtabDelta.integ = (uint8_t)((tmp >> 8) & 0xff);		// high byte
 966:	83 2f       	mov	r24, r19
 968:	99 27       	eor	r25, r25
 96a:	80 93 c7 02 	sts	0x02C7, r24
				WtabDelta.fract = (uint8_t)(tmp & 0xff);			// low byte
 96e:	20 93 c8 02 	sts	0x02C8, r18
				dur = *songPtr++;
 972:	8d 91       	ld	r24, X+
 974:	b0 93 ea 02 	sts	0x02EA, r27
 978:	a0 93 e9 02 	sts	0x02E9, r26
				CurNote = note;						// set 1st note to play, and
 97c:	40 93 c9 02 	sts	0x02C9, r20
				Wdur = GETDURATION(dur);   			// its duration.
 980:	e8 2f       	mov	r30, r24
 982:	ff 27       	eor	r31, r31
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	ec 5a       	subi	r30, 0xAC	; 172
 98a:	fe 4f       	sbci	r31, 0xFE	; 254
 98c:	80 81       	ld	r24, Z
 98e:	91 81       	ldd	r25, Z+1	; 0x01
 990:	90 93 d2 02 	sts	0x02D2, r25
 994:	80 93 d1 02 	sts	0x02D1, r24
 998:	08 95       	ret
            temp = (temp / 256) + 1;
        // update PWMval
        if (WtabVal2 > WtabVal1) 
            PWMval = WtabVal1 + temp;
        else 
            PWMval = WtabVal1 - temp;
 99a:	42 1b       	sub	r20, r18
 99c:	53 0b       	sbc	r21, r19
 99e:	50 93 e2 02 	sts	0x02E2, r21
 9a2:	40 93 e1 02 	sts	0x02E1, r20
        if (PWMval < 0) PWMval = 0;    // PWM should never go below zero if the above math is good, but I put this check here just in case
 9a6:	80 91 e1 02 	lds	r24, 0x02E1
 9aa:	90 91 e2 02 	lds	r25, 0x02E2
 9ae:	97 ff       	sbrs	r25, 7
 9b0:	af cf       	rjmp	.-162    	; 0x910 <do_audio_isr+0x10a>
 9b2:	10 92 e2 02 	sts	0x02E2, r1
 9b6:	10 92 e1 02 	sts	0x02E1, r1
 9ba:	aa cf       	rjmp	.-172    	; 0x910 <do_audio_isr+0x10a>
        //     if WtabVal2>WtabVal1:   PWMval = WtabVal1 + [(WtabVal2 - WtabVal1) * WtabCount]
        //     if WtabVal2<=WtabVal1:  PWMval = WtabVal1 - [(WtabVal1 - WtabVal2) * WtabCount]
        if (WtabVal2 > WtabVal1)
            temp = (WtabVal2 - WtabVal1) * WtabCount.fract;
        else
            temp = (WtabVal1 - WtabVal2) * WtabCount.fract;
 9bc:	4e 2f       	mov	r20, r30
 9be:	55 27       	eor	r21, r21
 9c0:	9a 01       	movw	r18, r20
 9c2:	26 1b       	sub	r18, r22
 9c4:	31 09       	sbc	r19, r1
 9c6:	80 91 df 02 	lds	r24, 0x02DF
 9ca:	99 27       	eor	r25, r25
 9cc:	89 cf       	rjmp	.-238    	; 0x8e0 <do_audio_isr+0xda>
    // if we are playing a song, then calculate the PWM value to play the next time we get into the ISR
    if (SongPlayFlag) {          // only handle audio if we're playing a song (SongPlayFlag is set by main to start playing audio, and it is cleared by ISR when all events in active song table are completed)

        // if the Note to play is a Rest, then turn the speaker off
        if ( CurNote == N_REST )
            TCCR1A &= ~_BV(COM1A1);  // turn off audio by turning off compare
 9ce:	80 91 80 00 	lds	r24, 0x0080
 9d2:	8f 77       	andi	r24, 0x7F	; 127
 9d4:	80 93 80 00 	sts	0x0080, r24
 9d8:	38 cf       	rjmp	.-400    	; 0x84a <do_audio_isr+0x44>
            
        } 
        else {                         // else we have finished playing this note from the wavetable
            // start a slight pause after the note (to distinguish it from the note to follow)
            if (Wnote_sep > 0) {                      // we'll keep playing no sound until we've gone through the ISR NOTE_SEP times, making a pause after playing the previously played note
                Wnote_sep--;    
 9da:	01 97       	sbiw	r24, 0x01	; 1
 9dc:	90 93 e7 02 	sts	0x02E7, r25
 9e0:	80 93 e6 02 	sts	0x02E6, r24
                //Disp[8] = 0x40;                     // XXX debug: turn on one pixel
                DDRB &= ~_BV(1);                      // turn off SPKR (OC1A) port
 9e4:	21 98       	cbi	0x04, 1	; 4
 9e6:	08 95       	ret

000009e8 <__vector_13>:
    }
}


ISR(TIMER1_OVF_vect)
{
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	ef 93       	push	r30
 a08:	ff 93       	push	r31

	// first, handle audio
	do_audio_isr();
 a0a:	fd de       	rcall	.-518    	; 0x806 <do_audio_isr>


	// next, handle the display

	if (--Rcount == 0) {		// do we display a new row this time?  (only every 20 or so)
 a0c:	80 91 61 02 	lds	r24, 0x0261
 a10:	81 50       	subi	r24, 0x01	; 1
 a12:	80 93 61 02 	sts	0x0261, r24
 a16:	80 91 61 02 	lds	r24, 0x0261
 a1a:	88 23       	and	r24, r24
 a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_13+0x38>
 a1e:	72 c0       	rjmp	.+228    	; 0xb04 <__vector_13+0x11c>
		Rcount = 20;
 a20:	84 e1       	ldi	r24, 0x14	; 20
 a22:	80 93 61 02 	sts	0x0261, r24

		//
		// we display green columns (5) followed by the red columns (5).
		// each will stay on for "Rcount" ticks (20 ticks is about 1ms).
		//
		switch (CurRow) {
 a26:	80 91 ce 02 	lds	r24, 0x02CE
 a2a:	99 27       	eor	r25, r25
 a2c:	aa 27       	eor	r26, r26
 a2e:	bb 27       	eor	r27, r27
 a30:	fc 01       	movw	r30, r24
 a32:	0a 97       	sbiw	r24, 0x0a	; 10
 a34:	f0 f0       	brcs	.+60     	; 0xa72 <__vector_13+0x8a>
				break;

		}	// switch


		CurRow++;
 a36:	80 91 ce 02 	lds	r24, 0x02CE
 a3a:	8f 5f       	subi	r24, 0xFF	; 255
 a3c:	80 93 ce 02 	sts	0x02CE, r24
		if (CurRow >= 10) {
 a40:	80 91 ce 02 	lds	r24, 0x02CE
 a44:	8a 30       	cpi	r24, 0x0A	; 10
 a46:	08 f4       	brcc	.+2      	; 0xa4a <__vector_13+0x62>
 a48:	5d c0       	rjmp	.+186    	; 0xb04 <__vector_13+0x11c>
			CurRow = 0;
 a4a:	10 92 ce 02 	sts	0x02CE, r1
			if (--SwapCounter == 0) {			// we count down display cycles...
 a4e:	80 91 e3 02 	lds	r24, 0x02E3
 a52:	81 50       	subi	r24, 0x01	; 1
 a54:	80 93 e3 02 	sts	0x02E3, r24
 a58:	80 91 e3 02 	lds	r24, 0x02E3
 a5c:	88 23       	and	r24, r24
 a5e:	09 f0       	breq	.+2      	; 0xa62 <__vector_13+0x7a>
 a60:	51 c0       	rjmp	.+162    	; 0xb04 <__vector_13+0x11c>
				SwapCounter = SwapInterval;
 a62:	80 91 dd 02 	lds	r24, 0x02DD
 a66:	80 93 e3 02 	sts	0x02E3, r24
				SwapRelease = 1;				// now mark the end of the display cycle
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	80 93 e0 02 	sts	0x02E0, r24
 a70:	49 c0       	rjmp	.+146    	; 0xb04 <__vector_13+0x11c>

		//
		// we display green columns (5) followed by the red columns (5).
		// each will stay on for "Rcount" ticks (20 ticks is about 1ms).
		//
		switch (CurRow) {
 a72:	e6 5e       	subi	r30, 0xE6	; 230
 a74:	ff 4f       	sbci	r31, 0xFF	; 255
 a76:	09 94       	ijmp
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 a78:	2e 98       	cbi	0x05, 6	; 5
				output_high(RC4);
				break;

			case 9:
				output_low(RC4);
				PORTD = Disp[9] | 0x80;
 a7a:	80 91 dc 02 	lds	r24, 0x02DC
 a7e:	80 68       	ori	r24, 0x80	; 128
 a80:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 a82:	2f 9a       	sbi	0x05, 7	; 5
 a84:	d8 cf       	rjmp	.-80     	; 0xa36 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 a86:	2f 98       	cbi	0x05, 7	; 5
		// each will stay on for "Rcount" ticks (20 ticks is about 1ms).
		//
		switch (CurRow) {
			case 0:
				output_low(RC5);
				PORTD = Disp[0] | 0x80;		// note: keep PD7 high (pullup for SW4)
 a88:	80 91 d3 02 	lds	r24, 0x02D3
 a8c:	80 68       	ori	r24, 0x80	; 128
 a8e:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 a90:	41 9a       	sbi	0x08, 1	; 8
 a92:	d1 cf       	rjmp	.-94     	; 0xa36 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 a94:	41 98       	cbi	0x08, 1	; 8
				output_high(GC1);
				break;

			case 1:
				output_low(GC1);
				PORTD = Disp[1] | 0x80;
 a96:	80 91 d4 02 	lds	r24, 0x02D4
 a9a:	80 68       	ori	r24, 0x80	; 128
 a9c:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 a9e:	42 9a       	sbi	0x08, 2	; 8
 aa0:	ca cf       	rjmp	.-108    	; 0xa36 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 aa2:	42 98       	cbi	0x08, 2	; 8
				output_high(GC2);
				break;

			case 2:
				output_low(GC2);
				PORTD = Disp[2] | 0x80;
 aa4:	80 91 d5 02 	lds	r24, 0x02D5
 aa8:	80 68       	ori	r24, 0x80	; 128
 aaa:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 aac:	43 9a       	sbi	0x08, 3	; 8
 aae:	c3 cf       	rjmp	.-122    	; 0xa36 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 ab0:	43 98       	cbi	0x08, 3	; 8
				output_high(GC3);
				break;

			case 3:
				output_low(GC3);
				PORTD = Disp[3] | 0x80;
 ab2:	80 91 d6 02 	lds	r24, 0x02D6
 ab6:	80 68       	ori	r24, 0x80	; 128
 ab8:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 aba:	44 9a       	sbi	0x08, 4	; 8
 abc:	bc cf       	rjmp	.-136    	; 0xa36 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 abe:	44 98       	cbi	0x08, 4	; 8
				output_high(GC4);
				break;

			case 4:
				output_low(GC4);
				PORTD = Disp[4] | 0x80;
 ac0:	80 91 d7 02 	lds	r24, 0x02D7
 ac4:	80 68       	ori	r24, 0x80	; 128
 ac6:	8b b9       	out	0x0b, r24	; 11
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_high(PORTC,(pin-16));
 ac8:	45 9a       	sbi	0x08, 5	; 8
 aca:	b5 cf       	rjmp	.-150    	; 0xa36 <__vector_13+0x4e>
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
	} else if (pin >= 16 && pin < 24) {
		_output_low(PORTC,(pin-16));
 acc:	45 98       	cbi	0x08, 5	; 8
				output_high(GC5);
				break;

			case 5:
				output_low(GC5);
				PORTD = Disp[5] | 0x80;
 ace:	80 91 d8 02 	lds	r24, 0x02D8
 ad2:	80 68       	ori	r24, 0x80	; 128
 ad4:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 ad6:	2b 9a       	sbi	0x05, 3	; 5
 ad8:	ae cf       	rjmp	.-164    	; 0xa36 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 ada:	2b 98       	cbi	0x05, 3	; 5
				output_high(RC1);
				break;

			case 6:
				output_low(RC1);
				PORTD = Disp[6] | 0x80;
 adc:	80 91 d9 02 	lds	r24, 0x02D9
 ae0:	80 68       	ori	r24, 0x80	; 128
 ae2:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 ae4:	2c 9a       	sbi	0x05, 4	; 5
 ae6:	a7 cf       	rjmp	.-178    	; 0xa36 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 ae8:	2c 98       	cbi	0x05, 4	; 5
				output_high(RC2);
				break;

			case 7:
				output_low(RC2);
				PORTD = Disp[7] | 0x80;
 aea:	80 91 da 02 	lds	r24, 0x02DA
 aee:	80 68       	ori	r24, 0x80	; 128
 af0:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 af2:	2d 9a       	sbi	0x05, 5	; 5
 af4:	a0 cf       	rjmp	.-192    	; 0xa36 <__vector_13+0x4e>
	if (pin < 8) {
		_output_low(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_low(PORTB,(pin-8));
 af6:	2d 98       	cbi	0x05, 5	; 5
				output_high(RC3);
				break;

			case 8:
				output_low(RC3);
				PORTD = Disp[8] | 0x80;
 af8:	80 91 db 02 	lds	r24, 0x02DB
 afc:	80 68       	ori	r24, 0x80	; 128
 afe:	8b b9       	out	0x0b, r24	; 11
	if (pin < 8) {
		_output_high(PORTA,pin);
	} else
#endif
	if (pin >= 8 && pin < 16) {
		_output_high(PORTB,(pin-8));
 b00:	2e 9a       	sbi	0x05, 6	; 5
 b02:	99 cf       	rjmp	.-206    	; 0xa36 <__vector_13+0x4e>
 b04:	ff 91       	pop	r31
 b06:	ef 91       	pop	r30
 b08:	bf 91       	pop	r27
 b0a:	af 91       	pop	r26
 b0c:	9f 91       	pop	r25
 b0e:	8f 91       	pop	r24
 b10:	7f 91       	pop	r23
 b12:	6f 91       	pop	r22
 b14:	5f 91       	pop	r21
 b16:	4f 91       	pop	r20
 b18:	3f 91       	pop	r19
 b1a:	2f 91       	pop	r18
 b1c:	0f 90       	pop	r0
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	0f 90       	pop	r0
 b22:	1f 90       	pop	r1
 b24:	18 95       	reti

00000b26 <start_timer1>:
{

	// initialize ICR1, which sets the "TOP" value for the counter to interrupt and start over
	// note: value of 50-1 ==> 20khz (assumes 8mhz clock, prescaled by 1/8)
	//ICR1 = 50-1;
	ICR1 = 50-1;
 b26:	81 e3       	ldi	r24, 0x31	; 49
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	90 93 87 00 	sts	0x0087, r25
 b2e:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 25;
 b32:	89 e1       	ldi	r24, 0x19	; 25
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	90 93 89 00 	sts	0x0089, r25
 b3a:	80 93 88 00 	sts	0x0088, r24
	// start timer:
	// set fast PWM, mode 14
	// and set prescaler to system clock/8
	//

	TCCR1A = _BV(COM1A1) | _BV(WGM11);			// note: COM1A1 enables the compare match against OCR1A
 b3e:	82 e8       	ldi	r24, 0x82	; 130
 b40:	80 93 80 00 	sts	0x0080, r24

	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS11);
 b44:	8a e1       	ldi	r24, 0x1A	; 26
 b46:	80 93 81 00 	sts	0x0081, r24

	TIMSK1 |= _BV(TOIE1);		// enable timer1 overflow interrupt
 b4a:	80 91 6f 00 	lds	r24, 0x006F
 b4e:	81 60       	ori	r24, 0x01	; 1
 b50:	80 93 6f 00 	sts	0x006F, r24
 b54:	08 95       	ret

00000b56 <avrinit>:
	// note: DDR pins are set to "1" to be an output, "0" for input.

	//          76543210
	//PORTB = 0b00000101;		// initial: pullups on inputs
	//DDRB  = 0b11111010;		// inputs: SW1 (PB0), SW2 (PB2); outputs: SPKR (PB1), RC1-RC5 (PB3-PB7)
	PORTB = 0x05;			// (see above)
 b56:	85 e0       	ldi	r24, 0x05	; 5
 b58:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0xFA;			// (see above)
 b5a:	8a ef       	ldi	r24, 0xFA	; 250
 b5c:	84 b9       	out	0x04, r24	; 4
	
	//          76543210
	//PORTC = 0b00000001;		// initial: pullups on inputs
	//DDRC  = 0b11111110;		// inputs: SW3 (PC0); outputs: GC1-GC5 (PC1-PC5)
	PORTC = 0x01;		// (see above)
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0xFE;		// (see above)
 b62:	8e ef       	ldi	r24, 0xFE	; 254
 b64:	87 b9       	out	0x07, r24	; 7
	
	//          76543210
	//PORTD = 0b10000000;		// initial: pullups on inputs
	//DDRD  = 0b01111111;		// inputs: SW4 (PD7) outputs: ROW1-ROW7 (PD0-PD6)

	PORTD = 0x80;		// (see above)
 b66:	80 e8       	ldi	r24, 0x80	; 128
 b68:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x7F;		// (see above)
 b6a:	8f e7       	ldi	r24, 0x7F	; 127
 b6c:	8a b9       	out	0x0a, r24	; 10


	sei();					// enable interrupts (individual interrupts still need to be enabled)
 b6e:	78 94       	sei
 b70:	08 95       	ret

00000b72 <button_init>:
}


void button_init(void)
{
	ButtonA = 0;
 b72:	10 92 e4 02 	sts	0x02E4, r1
	ButtonB = 0;
 b76:	10 92 cd 02 	sts	0x02CD, r1
	ButtonC = 0;
 b7a:	10 92 cc 02 	sts	0x02CC, r1
	ButtonD = 0;
 b7e:	10 92 e8 02 	sts	0x02E8, r1
	ButtonAEvent = 0;
 b82:	10 92 ca 02 	sts	0x02CA, r1
	ButtonBEvent = 0;
 b86:	10 92 c6 02 	sts	0x02C6, r1
	ButtonCEvent = 0;
 b8a:	10 92 cb 02 	sts	0x02CB, r1
	ButtonDEvent = 0;
 b8e:	10 92 eb 02 	sts	0x02EB, r1
 b92:	08 95       	ret

00000b94 <poll_buttons>:

void poll_buttons(void)
{
	// clear the state of a button, if it has been released

	if (ButtonA) {
 b94:	80 91 e4 02 	lds	r24, 0x02E4
 b98:	88 23       	and	r24, r24
 b9a:	11 f0       	breq	.+4      	; 0xba0 <poll_buttons+0xc>
//	returns the value of the input pin (but does not shift it!)
//
//	note: the most efficient code is generated when testing the return value against 0.
//
static inline unsigned char input_test(unsigned char pin)
{
 b9c:	18 99       	sbic	0x03, 0	; 3
 b9e:	1b c0       	rjmp	.+54     	; 0xbd6 <poll_buttons+0x42>
		if (!button_pressed(SW1)) {
			ButtonA = 0;
		}
	}
	if (ButtonB) {
 ba0:	80 91 cd 02 	lds	r24, 0x02CD
 ba4:	88 23       	and	r24, r24
 ba6:	11 f0       	breq	.+4      	; 0xbac <poll_buttons+0x18>
 ba8:	1a 99       	sbic	0x03, 2	; 3
 baa:	12 c0       	rjmp	.+36     	; 0xbd0 <poll_buttons+0x3c>
		if (!button_pressed(SW2)) {
			ButtonB = 0;
		}
	}
	if (ButtonC) {
 bac:	80 91 cc 02 	lds	r24, 0x02CC
 bb0:	88 23       	and	r24, r24
 bb2:	11 f0       	breq	.+4      	; 0xbb8 <poll_buttons+0x24>
 bb4:	30 99       	sbic	0x06, 0	; 6
 bb6:	09 c0       	rjmp	.+18     	; 0xbca <poll_buttons+0x36>
		if (!button_pressed(SW3)) {
			ButtonC = 0;
		}
	}
	if (ButtonD) {
 bb8:	80 91 e8 02 	lds	r24, 0x02E8
 bbc:	88 23       	and	r24, r24
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <poll_buttons+0x34>
 bc0:	4f 9b       	sbis	0x09, 7	; 9
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <poll_buttons+0x34>
		if (!button_pressed(SW4)) {
			ButtonD = 0;
 bc4:	10 92 e8 02 	sts	0x02E8, r1
 bc8:	08 95       	ret
			ButtonB = 0;
		}
	}
	if (ButtonC) {
		if (!button_pressed(SW3)) {
			ButtonC = 0;
 bca:	10 92 cc 02 	sts	0x02CC, r1
 bce:	f4 cf       	rjmp	.-24     	; 0xbb8 <poll_buttons+0x24>
			ButtonA = 0;
		}
	}
	if (ButtonB) {
		if (!button_pressed(SW2)) {
			ButtonB = 0;
 bd0:	10 92 cd 02 	sts	0x02CD, r1
 bd4:	eb cf       	rjmp	.-42     	; 0xbac <poll_buttons+0x18>
{
	// clear the state of a button, if it has been released

	if (ButtonA) {
		if (!button_pressed(SW1)) {
			ButtonA = 0;
 bd6:	10 92 e4 02 	sts	0x02E4, r1
 bda:	e2 cf       	rjmp	.-60     	; 0xba0 <poll_buttons+0xc>

00000bdc <handlebuttons>:
// this watches for button "events" and performs actions accordingly.
//
void handlebuttons(void)
{

	if (!ButtonA && button_pressed(SW1)) {
 bdc:	80 91 e4 02 	lds	r24, 0x02E4
 be0:	88 23       	and	r24, r24
 be2:	41 f4       	brne	.+16     	; 0xbf4 <handlebuttons+0x18>
 be4:	18 99       	sbic	0x03, 0	; 3
 be6:	06 c0       	rjmp	.+12     	; 0xbf4 <handlebuttons+0x18>
	
		ButtonA = 1;
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	80 93 e4 02 	sts	0x02E4, r24

		// action
		ButtonAEvent = 1;
 bee:	80 93 ca 02 	sts	0x02CA, r24
 bf2:	08 95       	ret

	} else if (!ButtonB && button_pressed(SW2)) {
 bf4:	80 91 cd 02 	lds	r24, 0x02CD
 bf8:	88 23       	and	r24, r24
 bfa:	91 f0       	breq	.+36     	; 0xc20 <handlebuttons+0x44>
		ButtonB = 1;
	
		// action
		ButtonBEvent = 1;
		
	} else if (!ButtonC && button_pressed(SW3)) {
 bfc:	80 91 cc 02 	lds	r24, 0x02CC
 c00:	88 23       	and	r24, r24
 c02:	11 f4       	brne	.+4      	; 0xc08 <handlebuttons+0x2c>
 c04:	30 9b       	sbis	0x06, 0	; 6
 c06:	16 c0       	rjmp	.+44     	; 0xc34 <handlebuttons+0x58>
		ButtonC = 1;
	
		// action
		ButtonCEvent = 1;
		
	} else if (!ButtonD && button_pressed(SW4)) {
 c08:	80 91 e8 02 	lds	r24, 0x02E8
 c0c:	88 23       	and	r24, r24
 c0e:	81 f4       	brne	.+32     	; 0xc30 <handlebuttons+0x54>
 c10:	4f 99       	sbic	0x09, 7	; 9
 c12:	0e c0       	rjmp	.+28     	; 0xc30 <handlebuttons+0x54>

		ButtonD = 1;
 c14:	81 e0       	ldi	r24, 0x01	; 1
 c16:	80 93 e8 02 	sts	0x02E8, r24
	
		// action
		ButtonDEvent = 1;
 c1a:	80 93 eb 02 	sts	0x02EB, r24
 c1e:	08 95       	ret
 c20:	1a 99       	sbic	0x03, 2	; 3
 c22:	ec cf       	rjmp	.-40     	; 0xbfc <handlebuttons+0x20>
		// action
		ButtonAEvent = 1;

	} else if (!ButtonB && button_pressed(SW2)) {

		ButtonB = 1;
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	80 93 cd 02 	sts	0x02CD, r24
	
		// action
		ButtonBEvent = 1;
 c2a:	80 93 c6 02 	sts	0x02C6, r24
 c2e:	08 95       	ret
	
		// action
		ButtonDEvent = 1;
		
	} else {
		poll_buttons();
 c30:	b1 df       	rcall	.-158    	; 0xb94 <poll_buttons>
 c32:	08 95       	ret
		// action
		ButtonBEvent = 1;
		
	} else if (!ButtonC && button_pressed(SW3)) {

		ButtonC = 1;
 c34:	81 e0       	ldi	r24, 0x01	; 1
 c36:	80 93 cc 02 	sts	0x02CC, r24
	
		// action
		ButtonCEvent = 1;
 c3a:	80 93 cb 02 	sts	0x02CB, r24
 c3e:	08 95       	ret

00000c40 <swapbuffers>:
 *
 */
void swapbuffers(void)
{
	while (!SwapRelease) {		// spin until this flag is set
		NOP();
 c40:	80 91 e0 02 	lds	r24, 0x02E0
 c44:	88 23       	and	r24, r24
 c46:	29 f4       	brne	.+10     	; 0xc52 <swapbuffers+0x12>
 c48:	00 00       	nop
 c4a:	80 91 e0 02 	lds	r24, 0x02E0
 c4e:	88 23       	and	r24, r24
 c50:	d9 f3       	breq	.-10     	; 0xc48 <swapbuffers+0x8>
	}
	NOP();
 c52:	00 00       	nop
	SwapRelease = 0;			// clear flag (for next time)
 c54:	10 92 e0 02 	sts	0x02E0, r1
 c58:	08 95       	ret

00000c5a <initswapbuffers>:
}

void initswapbuffers(void)
{
	SwapRelease = 0;
 c5a:	10 92 e0 02 	sts	0x02E0, r1
	SwapInterval = 1;
 c5e:	81 e0       	ldi	r24, 0x01	; 1
 c60:	80 93 dd 02 	sts	0x02DD, r24
	SwapCounter = 1;
 c64:	80 93 e3 02 	sts	0x02E3, r24
 c68:	08 95       	ret

00000c6a <swapinterval>:
}

void swapinterval(uint8_t i)
{
	if (i != 0) {
 c6a:	88 23       	and	r24, r24
 c6c:	11 f0       	breq	.+4      	; 0xc72 <swapinterval+0x8>
		SwapInterval = i;
 c6e:	80 93 dd 02 	sts	0x02DD, r24
 c72:	08 95       	ret

00000c74 <cleardisplay>:
	}
}


void cleardisplay(void)
{
 c74:	e3 ed       	ldi	r30, 0xD3	; 211
 c76:	f2 e0       	ldi	r31, 0x02	; 2
 c78:	89 e0       	ldi	r24, 0x09	; 9
	uint8_t i;

	// initialize display buffer

	for (i = 0; i < 10; i++) {
		Disp[i] = 0x0;
 c7a:	11 92       	st	Z+, r1
{
	uint8_t i;

	// initialize display buffer

	for (i = 0; i < 10; i++) {
 c7c:	81 50       	subi	r24, 0x01	; 1
 c7e:	87 ff       	sbrs	r24, 7
 c80:	fc cf       	rjmp	.-8      	; 0xc7a <cleardisplay+0x6>
 c82:	08 95       	ret

00000c84 <setcolor>:
//
// set the current color (RED, GREEN, ...)
//
void setcolor(uint8_t c)
{
	_CurColor = 0x3 & c;
 c84:	83 70       	andi	r24, 0x03	; 3
 c86:	80 93 60 02 	sts	0x0260, r24
 c8a:	08 95       	ret

00000c8c <getcolor>:
//
// get the current color (returns it).
//
uint8_t getcolor(void)
{
	return _CurColor;
 c8c:	80 91 60 02 	lds	r24, 0x0260
}
 c90:	99 27       	eor	r25, r25
 c92:	08 95       	ret

00000c94 <drawpoint>:
//
//	note: upper left is (0 0) and lower right is (6 4)
//
//
void drawpoint(uint8_t x, uint8_t y)
{
 c94:	28 2f       	mov	r18, r24
	uint8_t bits;

	if ((x < 7) && (y < 5)) {	// clipping
 c96:	87 30       	cpi	r24, 0x07	; 7
 c98:	38 f5       	brcc	.+78     	; 0xce8 <drawpoint+0x54>
 c9a:	65 30       	cpi	r22, 0x05	; 5
 c9c:	28 f5       	brcc	.+74     	; 0xce8 <drawpoint+0x54>
		bits = 0x40 >> x;
 c9e:	80 e4       	ldi	r24, 0x40	; 64
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <drawpoint+0x14>
 ca4:	95 95       	asr	r25
 ca6:	87 95       	ror	r24
 ca8:	2a 95       	dec	r18
 caa:	e2 f7       	brpl	.-8      	; 0xca4 <drawpoint+0x10>
 cac:	28 2f       	mov	r18, r24
		if (_CurColor & 0x1) {	// red plane
 cae:	30 91 60 02 	lds	r19, 0x0260
 cb2:	30 fd       	sbrc	r19, 0
 cb4:	1a c0       	rjmp	.+52     	; 0xcea <drawpoint+0x56>
			Disp[y+5] |= bits;
		} else {
			Disp[y+5] &= ~bits;
 cb6:	77 27       	eor	r23, r23
 cb8:	fb 01       	movw	r30, r22
 cba:	ed 52       	subi	r30, 0x2D	; 45
 cbc:	fd 4f       	sbci	r31, 0xFD	; 253
 cbe:	98 2f       	mov	r25, r24
 cc0:	90 95       	com	r25
 cc2:	85 81       	ldd	r24, Z+5	; 0x05
 cc4:	89 23       	and	r24, r25
 cc6:	85 83       	std	Z+5, r24	; 0x05
		}
		if (_CurColor & 0x2) {	// green plane
 cc8:	31 ff       	sbrs	r19, 1
 cca:	07 c0       	rjmp	.+14     	; 0xcda <drawpoint+0x46>
			Disp[y] |= bits;
 ccc:	fb 01       	movw	r30, r22
 cce:	ed 52       	subi	r30, 0x2D	; 45
 cd0:	fd 4f       	sbci	r31, 0xFD	; 253
 cd2:	80 81       	ld	r24, Z
 cd4:	82 2b       	or	r24, r18
 cd6:	80 83       	st	Z, r24
 cd8:	08 95       	ret
		} else {
			Disp[y] &= ~bits;
 cda:	fb 01       	movw	r30, r22
 cdc:	ed 52       	subi	r30, 0x2D	; 45
 cde:	fd 4f       	sbci	r31, 0xFD	; 253
 ce0:	20 95       	com	r18
 ce2:	80 81       	ld	r24, Z
 ce4:	82 23       	and	r24, r18
 ce6:	80 83       	st	Z, r24
 ce8:	08 95       	ret
	uint8_t bits;

	if ((x < 7) && (y < 5)) {	// clipping
		bits = 0x40 >> x;
		if (_CurColor & 0x1) {	// red plane
			Disp[y+5] |= bits;
 cea:	77 27       	eor	r23, r23
 cec:	fb 01       	movw	r30, r22
 cee:	ed 52       	subi	r30, 0x2D	; 45
 cf0:	fd 4f       	sbci	r31, 0xFD	; 253
 cf2:	85 81       	ldd	r24, Z+5	; 0x05
 cf4:	82 2b       	or	r24, r18
 cf6:	e7 cf       	rjmp	.-50     	; 0xcc6 <drawpoint+0x32>

00000cf8 <drawfilledrect>:
//	draw a filled rectangle from (x1 y1) to (x2 y2)
//
//	XXX probably could be optimized more
//
void drawfilledrect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
 cf8:	0f 93       	push	r16
 cfa:	1f 93       	push	r17
 cfc:	cf 93       	push	r28
 cfe:	df 93       	push	r29
 d00:	18 2f       	mov	r17, r24
 d02:	02 2f       	mov	r16, r18
	uint8_t bits;
	uint8_t x, y, tmp;

	if ((x1 < 7) && (y1 < 5) && (x2 < 7) && (y2 < 5)) {	// clipping
 d04:	87 30       	cpi	r24, 0x07	; 7
 d06:	08 f0       	brcs	.+2      	; 0xd0a <drawfilledrect+0x12>
 d08:	52 c0       	rjmp	.+164    	; 0xdae <drawfilledrect+0xb6>
 d0a:	65 30       	cpi	r22, 0x05	; 5
 d0c:	08 f0       	brcs	.+2      	; 0xd10 <drawfilledrect+0x18>
 d0e:	4f c0       	rjmp	.+158    	; 0xdae <drawfilledrect+0xb6>
 d10:	47 30       	cpi	r20, 0x07	; 7
 d12:	08 f0       	brcs	.+2      	; 0xd16 <drawfilledrect+0x1e>
 d14:	4c c0       	rjmp	.+152    	; 0xdae <drawfilledrect+0xb6>
 d16:	25 30       	cpi	r18, 0x05	; 5
 d18:	08 f0       	brcs	.+2      	; 0xd1c <drawfilledrect+0x24>
 d1a:	49 c0       	rjmp	.+146    	; 0xdae <drawfilledrect+0xb6>
		if (x1 > x2) {
 d1c:	48 17       	cp	r20, r24
 d1e:	08 f4       	brcc	.+2      	; 0xd22 <drawfilledrect+0x2a>
 d20:	43 c0       	rjmp	.+134    	; 0xda8 <drawfilledrect+0xb0>
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if (y1 > y2) {
 d22:	06 17       	cp	r16, r22
 d24:	18 f4       	brcc	.+6      	; 0xd2c <drawfilledrect+0x34>
			tmp = y1;
 d26:	86 2f       	mov	r24, r22
			y1 = y2;
 d28:	60 2f       	mov	r22, r16
			y2 = tmp;
 d2a:	08 2f       	mov	r16, r24
		}
		for (y = y1; y <= y2; y++) {
 d2c:	26 2f       	mov	r18, r22
 d2e:	06 17       	cp	r16, r22
 d30:	f0 f1       	brcs	.+124    	; 0xdae <drawfilledrect+0xb6>
 d32:	80 91 60 02 	lds	r24, 0x0260
 d36:	99 27       	eor	r25, r25
 d38:	bc 01       	movw	r22, r24
 d3a:	61 70       	andi	r22, 0x01	; 1
 d3c:	70 70       	andi	r23, 0x00	; 0
 d3e:	dc 01       	movw	r26, r24
 d40:	a2 70       	andi	r26, 0x02	; 2
 d42:	b0 70       	andi	r27, 0x00	; 0
			for (x = x1; x <= x2; x++) {
 d44:	51 2f       	mov	r21, r17
 d46:	41 17       	cp	r20, r17
 d48:	58 f1       	brcs	.+86     	; 0xda0 <drawfilledrect+0xa8>
 d4a:	e2 2f       	mov	r30, r18
 d4c:	ff 27       	eor	r31, r31
 d4e:	c0 e4       	ldi	r28, 0x40	; 64
 d50:	d0 e0       	ldi	r29, 0x00	; 0
 d52:	ed 52       	subi	r30, 0x2D	; 45
 d54:	fd 4f       	sbci	r31, 0xFD	; 253
 d56:	0b c0       	rjmp	.+22     	; 0xd6e <drawfilledrect+0x76>
				bits = 0x40 >> x;
				if (_CurColor & 0x1) {	// red plane
					Disp[y+5] |= bits;
 d58:	85 81       	ldd	r24, Z+5	; 0x05
 d5a:	83 2b       	or	r24, r19
				} else {
					Disp[y+5] &= ~bits;
 d5c:	85 83       	std	Z+5, r24	; 0x05
				}
				if (_CurColor & 0x2) {	// green plane
 d5e:	10 97       	sbiw	r26, 0x00	; 0
 d60:	c1 f0       	breq	.+48     	; 0xd92 <drawfilledrect+0x9a>
					Disp[y] |= bits;
 d62:	80 81       	ld	r24, Z
 d64:	83 2b       	or	r24, r19
				} else {
					Disp[y] &= ~bits;
 d66:	80 83       	st	Z, r24
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		for (y = y1; y <= y2; y++) {
			for (x = x1; x <= x2; x++) {
 d68:	5f 5f       	subi	r21, 0xFF	; 255
 d6a:	45 17       	cp	r20, r21
 d6c:	c8 f0       	brcs	.+50     	; 0xda0 <drawfilledrect+0xa8>
				bits = 0x40 >> x;
 d6e:	ce 01       	movw	r24, r28
 d70:	05 2e       	mov	r0, r21
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <drawfilledrect+0x80>
 d74:	95 95       	asr	r25
 d76:	87 95       	ror	r24
 d78:	0a 94       	dec	r0
 d7a:	e2 f7       	brpl	.-8      	; 0xd74 <drawfilledrect+0x7c>
 d7c:	38 2f       	mov	r19, r24
				if (_CurColor & 0x1) {	// red plane
 d7e:	61 15       	cp	r22, r1
 d80:	71 05       	cpc	r23, r1
 d82:	51 f7       	brne	.-44     	; 0xd58 <drawfilledrect+0x60>
					Disp[y+5] |= bits;
				} else {
					Disp[y+5] &= ~bits;
 d84:	98 2f       	mov	r25, r24
 d86:	90 95       	com	r25
 d88:	85 81       	ldd	r24, Z+5	; 0x05
 d8a:	89 23       	and	r24, r25
 d8c:	85 83       	std	Z+5, r24	; 0x05
				}
				if (_CurColor & 0x2) {	// green plane
 d8e:	10 97       	sbiw	r26, 0x00	; 0
 d90:	41 f7       	brne	.-48     	; 0xd62 <drawfilledrect+0x6a>
					Disp[y] |= bits;
				} else {
					Disp[y] &= ~bits;
 d92:	30 95       	com	r19
 d94:	80 81       	ld	r24, Z
 d96:	83 23       	and	r24, r19
 d98:	80 83       	st	Z, r24
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		for (y = y1; y <= y2; y++) {
			for (x = x1; x <= x2; x++) {
 d9a:	5f 5f       	subi	r21, 0xFF	; 255
 d9c:	45 17       	cp	r20, r21
 d9e:	38 f7       	brcc	.-50     	; 0xd6e <drawfilledrect+0x76>
		if (y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		for (y = y1; y <= y2; y++) {
 da0:	2f 5f       	subi	r18, 0xFF	; 255
 da2:	02 17       	cp	r16, r18
 da4:	78 f6       	brcc	.-98     	; 0xd44 <drawfilledrect+0x4c>
 da6:	03 c0       	rjmp	.+6      	; 0xdae <drawfilledrect+0xb6>
	uint8_t x, y, tmp;

	if ((x1 < 7) && (y1 < 5) && (x2 < 7) && (y2 < 5)) {	// clipping
		if (x1 > x2) {
			tmp = x1;
			x1 = x2;
 da8:	14 2f       	mov	r17, r20
			x2 = tmp;
 daa:	48 2f       	mov	r20, r24
 dac:	ba cf       	rjmp	.-140    	; 0xd22 <drawfilledrect+0x2a>
 dae:	df 91       	pop	r29
 db0:	cf 91       	pop	r28
 db2:	1f 91       	pop	r17
 db4:	0f 91       	pop	r16
 db6:	08 95       	ret

00000db8 <initaudio>:
// a simple API for making sounds.

void initaudio(void)
{
	// default wavetable (WT_SAWTOOTH)
	wavPtr = SawWtable;
 db8:	80 e2       	ldi	r24, 0x20	; 32
 dba:	92 e0       	ldi	r25, 0x02	; 2
 dbc:	90 93 d0 02 	sts	0x02D0, r25
 dc0:	80 93 cf 02 	sts	0x02CF, r24
	
	// default tempo
	//XXX
	
	SongPlayFlag = 0;
 dc4:	10 92 e5 02 	sts	0x02E5, r1
	PWMval = wavPtr[0];		// initialize to first entry of table
 dc8:	80 91 20 02 	lds	r24, 0x0220
 dcc:	99 27       	eor	r25, r25
 dce:	90 93 e2 02 	sts	0x02E2, r25
 dd2:	80 93 e1 02 	sts	0x02E1, r24
 dd6:	08 95       	ret

00000dd8 <settempo>:
//
// sets tempo for playnote function.
// the default tempo is 72 beats per minute.
//
void settempo(byte bpm)
{
 dd8:	08 95       	ret

00000dda <setwavetable>:
// from the API all tables are just referenced by named constants.
// WT_SAWTOOTH is the default.
//
void setwavetable(byte wtable)
{
	if (wtable == WT_SINE) {
 dda:	82 30       	cpi	r24, 0x02	; 2
 ddc:	29 f0       	breq	.+10     	; 0xde8 <setwavetable+0xe>
		wavPtr = SineWtable;
	} else if (wtable == WT_SAWTOOTH) {
 dde:	81 30       	cpi	r24, 0x01	; 1
 de0:	51 f0       	breq	.+20     	; 0xdf6 <setwavetable+0x1c>
		wavPtr = SawWtable;
	} else if (wtable == WT_SQUARE) {
 de2:	83 30       	cpi	r24, 0x03	; 3
 de4:	79 f0       	breq	.+30     	; 0xe04 <setwavetable+0x2a>
 de6:	08 95       	ret
// WT_SAWTOOTH is the default.
//
void setwavetable(byte wtable)
{
	if (wtable == WT_SINE) {
		wavPtr = SineWtable;
 de8:	80 e4       	ldi	r24, 0x40	; 64
 dea:	92 e0       	ldi	r25, 0x02	; 2
	} else if (wtable == WT_SAWTOOTH) {
		wavPtr = SawWtable;
 dec:	90 93 d0 02 	sts	0x02D0, r25
 df0:	80 93 cf 02 	sts	0x02CF, r24
 df4:	08 95       	ret
 df6:	80 e2       	ldi	r24, 0x20	; 32
 df8:	92 e0       	ldi	r25, 0x02	; 2
 dfa:	90 93 d0 02 	sts	0x02D0, r25
 dfe:	80 93 cf 02 	sts	0x02CF, r24
 e02:	08 95       	ret
	} else if (wtable == WT_SQUARE) {
		wavPtr = SquareWtable;
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	92 e0       	ldi	r25, 0x02	; 2
 e08:	90 93 d0 02 	sts	0x02D0, r25
 e0c:	80 93 cf 02 	sts	0x02CF, r24
 e10:	08 95       	ret

00000e12 <playsound>:
//
// play a tone with pitch in Hz, and dur in ms.
// the current wavetable is used.
//
void playsound(int pitch, int dur)
{
 e12:	08 95       	ret

00000e14 <playnote>:
// duration dur (predefined constants like N_QUARTER, etc.)
// the current wavetable is used.
//
// XXX NYI !!
void playnote(byte note, byte dur)
{}
 e14:	08 95       	ret

00000e16 <playsong>:
// and must end with the byte N_END.
//
// XXX do we correctly handle the case where this is called when a song is currently playing?
//
void playsong(byte *songtable)
{
 e16:	cf 93       	push	r28
 e18:	df 93       	push	r29
 e1a:	ec 01       	movw	r28, r24
	uint16_t tmp;
	uint8_t note, dur;

	if (songtable == NULL) {		// error check
 e1c:	00 97       	sbiw	r24, 0x00	; 0
 e1e:	09 f4       	brne	.+2      	; 0xe22 <playsong+0xc>
 e20:	41 c0       	rjmp	.+130    	; 0xea4 <playsong+0x8e>
		return;
	}
	
	SongPlayFlag = 0;				// just in case a song is currently playing
 e22:	10 92 e5 02 	sts	0x02E5, r1

	songPtr = songtable;			// set pointer to the song table array
 e26:	90 93 ea 02 	sts	0x02EA, r25
 e2a:	80 93 e9 02 	sts	0x02E9, r24

	note = *songPtr++;
 e2e:	dc 01       	movw	r26, r24
 e30:	4d 91       	ld	r20, X+
 e32:	b0 93 ea 02 	sts	0x02EA, r27
 e36:	a0 93 e9 02 	sts	0x02E9, r26
	if (note != N_END) {
 e3a:	44 23       	and	r20, r20
 e3c:	99 f1       	breq	.+102    	; 0xea4 <playsong+0x8e>

		// note: this code is repeated inside ISR - must match!!
		tmp = GETNOTEDELTA(note);
 e3e:	e4 2f       	mov	r30, r20
 e40:	ff 27       	eor	r31, r31
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	e2 58       	subi	r30, 0x82	; 130
 e48:	fe 4f       	sbci	r31, 0xFE	; 254
 e4a:	20 81       	ld	r18, Z
 e4c:	31 81       	ldd	r19, Z+1	; 0x01
		WtabDelta.integ = (uint8_t)((tmp >> 8) & 0xff);		// high byte
 e4e:	83 2f       	mov	r24, r19
 e50:	99 27       	eor	r25, r25
 e52:	80 93 c7 02 	sts	0x02C7, r24
		WtabDelta.fract = (uint8_t)(tmp & 0xff);			// low byte
 e56:	20 93 c8 02 	sts	0x02C8, r18
		dur = *songPtr++;
 e5a:	89 81       	ldd	r24, Y+1	; 0x01
 e5c:	11 96       	adiw	r26, 0x01	; 1
 e5e:	b0 93 ea 02 	sts	0x02EA, r27
 e62:	a0 93 e9 02 	sts	0x02E9, r26
		CurNote = note;						// set 1st note to play, and
 e66:	40 93 c9 02 	sts	0x02C9, r20
		Wdur = GETDURATION(dur);   			// its duration.
 e6a:	e8 2f       	mov	r30, r24
 e6c:	ff 27       	eor	r31, r31
 e6e:	ee 0f       	add	r30, r30
 e70:	ff 1f       	adc	r31, r31
 e72:	ec 5a       	subi	r30, 0xAC	; 172
 e74:	fe 4f       	sbci	r31, 0xFE	; 254
 e76:	80 81       	ld	r24, Z
 e78:	91 81       	ldd	r25, Z+1	; 0x01
 e7a:	90 93 d2 02 	sts	0x02D2, r25
 e7e:	80 93 d1 02 	sts	0x02D1, r24

		WtabCount.integ = 0;				// we will start playing from start of current wavetable
 e82:	10 92 de 02 	sts	0x02DE, r1
		WtabCount.fract = 0;
 e86:	10 92 df 02 	sts	0x02DF, r1
		PWMval = wavPtr[0];					// initialize to first entry of table
 e8a:	e0 91 cf 02 	lds	r30, 0x02CF
 e8e:	f0 91 d0 02 	lds	r31, 0x02D0
 e92:	80 81       	ld	r24, Z
 e94:	99 27       	eor	r25, r25
 e96:	90 93 e2 02 	sts	0x02E2, r25
 e9a:	80 93 e1 02 	sts	0x02E1, r24
		SongPlayFlag = 1;					// start playing song
 e9e:	81 e0       	ldi	r24, 0x01	; 1
 ea0:	80 93 e5 02 	sts	0x02E5, r24
 ea4:	df 91       	pop	r29
 ea6:	cf 91       	pop	r28
 ea8:	08 95       	ret

00000eaa <isaudioplaying>:
//
// this returns 1 if audio is playing, 0 otherwise.
//
byte isaudioplaying(void)
{
	return SongPlayFlag;
 eaa:	80 91 e5 02 	lds	r24, 0x02E5
}
 eae:	99 27       	eor	r25, r25
 eb0:	08 95       	ret

00000eb2 <waitaudio>:
// this waits until audio (e.g. note or song) is finished, then returns.
//
void waitaudio(void)
{
	while (SongPlayFlag) {
		NOP();
 eb2:	80 91 e5 02 	lds	r24, 0x02E5
 eb6:	88 23       	and	r24, r24
 eb8:	29 f0       	breq	.+10     	; 0xec4 <waitaudio+0x12>
 eba:	00 00       	nop
 ebc:	80 91 e5 02 	lds	r24, 0x02E5
 ec0:	88 23       	and	r24, r24
 ec2:	d9 f7       	brne	.-10     	; 0xeba <waitaudio+0x8>
 ec4:	08 95       	ret

00000ec6 <__mulsi3>:
 ec6:	62 9f       	mul	r22, r18
 ec8:	d0 01       	movw	r26, r0
 eca:	73 9f       	mul	r23, r19
 ecc:	f0 01       	movw	r30, r0
 ece:	82 9f       	mul	r24, r18
 ed0:	e0 0d       	add	r30, r0
 ed2:	f1 1d       	adc	r31, r1
 ed4:	64 9f       	mul	r22, r20
 ed6:	e0 0d       	add	r30, r0
 ed8:	f1 1d       	adc	r31, r1
 eda:	92 9f       	mul	r25, r18
 edc:	f0 0d       	add	r31, r0
 ede:	83 9f       	mul	r24, r19
 ee0:	f0 0d       	add	r31, r0
 ee2:	74 9f       	mul	r23, r20
 ee4:	f0 0d       	add	r31, r0
 ee6:	65 9f       	mul	r22, r21
 ee8:	f0 0d       	add	r31, r0
 eea:	99 27       	eor	r25, r25
 eec:	72 9f       	mul	r23, r18
 eee:	b0 0d       	add	r27, r0
 ef0:	e1 1d       	adc	r30, r1
 ef2:	f9 1f       	adc	r31, r25
 ef4:	63 9f       	mul	r22, r19
 ef6:	b0 0d       	add	r27, r0
 ef8:	e1 1d       	adc	r30, r1
 efa:	f9 1f       	adc	r31, r25
 efc:	bd 01       	movw	r22, r26
 efe:	cf 01       	movw	r24, r30
 f00:	11 24       	eor	r1, r1
 f02:	08 95       	ret

00000f04 <__divmodhi4>:
 f04:	97 fb       	bst	r25, 7
 f06:	09 2e       	mov	r0, r25
 f08:	07 26       	eor	r0, r23
 f0a:	0a d0       	rcall	.+20     	; 0xf20 <__divmodhi4_neg1>
 f0c:	77 fd       	sbrc	r23, 7
 f0e:	04 d0       	rcall	.+8      	; 0xf18 <__divmodhi4_neg2>
 f10:	2e d0       	rcall	.+92     	; 0xf6e <__udivmodhi4>
 f12:	06 d0       	rcall	.+12     	; 0xf20 <__divmodhi4_neg1>
 f14:	00 20       	and	r0, r0
 f16:	1a f4       	brpl	.+6      	; 0xf1e <__divmodhi4_exit>

00000f18 <__divmodhi4_neg2>:
 f18:	70 95       	com	r23
 f1a:	61 95       	neg	r22
 f1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000f1e <__divmodhi4_exit>:
 f1e:	08 95       	ret

00000f20 <__divmodhi4_neg1>:
 f20:	f6 f7       	brtc	.-4      	; 0xf1e <__divmodhi4_exit>
 f22:	90 95       	com	r25
 f24:	81 95       	neg	r24
 f26:	9f 4f       	sbci	r25, 0xFF	; 255
 f28:	08 95       	ret

00000f2a <__udivmodsi4>:
 f2a:	a1 e2       	ldi	r26, 0x21	; 33
 f2c:	1a 2e       	mov	r1, r26
 f2e:	aa 1b       	sub	r26, r26
 f30:	bb 1b       	sub	r27, r27
 f32:	fd 01       	movw	r30, r26
 f34:	0d c0       	rjmp	.+26     	; 0xf50 <__udivmodsi4_ep>

00000f36 <__udivmodsi4_loop>:
 f36:	aa 1f       	adc	r26, r26
 f38:	bb 1f       	adc	r27, r27
 f3a:	ee 1f       	adc	r30, r30
 f3c:	ff 1f       	adc	r31, r31
 f3e:	a2 17       	cp	r26, r18
 f40:	b3 07       	cpc	r27, r19
 f42:	e4 07       	cpc	r30, r20
 f44:	f5 07       	cpc	r31, r21
 f46:	20 f0       	brcs	.+8      	; 0xf50 <__udivmodsi4_ep>
 f48:	a2 1b       	sub	r26, r18
 f4a:	b3 0b       	sbc	r27, r19
 f4c:	e4 0b       	sbc	r30, r20
 f4e:	f5 0b       	sbc	r31, r21

00000f50 <__udivmodsi4_ep>:
 f50:	66 1f       	adc	r22, r22
 f52:	77 1f       	adc	r23, r23
 f54:	88 1f       	adc	r24, r24
 f56:	99 1f       	adc	r25, r25
 f58:	1a 94       	dec	r1
 f5a:	69 f7       	brne	.-38     	; 0xf36 <__udivmodsi4_loop>
 f5c:	60 95       	com	r22
 f5e:	70 95       	com	r23
 f60:	80 95       	com	r24
 f62:	90 95       	com	r25
 f64:	9b 01       	movw	r18, r22
 f66:	ac 01       	movw	r20, r24
 f68:	bd 01       	movw	r22, r26
 f6a:	cf 01       	movw	r24, r30
 f6c:	08 95       	ret

00000f6e <__udivmodhi4>:
 f6e:	aa 1b       	sub	r26, r26
 f70:	bb 1b       	sub	r27, r27
 f72:	51 e1       	ldi	r21, 0x11	; 17
 f74:	07 c0       	rjmp	.+14     	; 0xf84 <__udivmodhi4_ep>

00000f76 <__udivmodhi4_loop>:
 f76:	aa 1f       	adc	r26, r26
 f78:	bb 1f       	adc	r27, r27
 f7a:	a6 17       	cp	r26, r22
 f7c:	b7 07       	cpc	r27, r23
 f7e:	10 f0       	brcs	.+4      	; 0xf84 <__udivmodhi4_ep>
 f80:	a6 1b       	sub	r26, r22
 f82:	b7 0b       	sbc	r27, r23

00000f84 <__udivmodhi4_ep>:
 f84:	88 1f       	adc	r24, r24
 f86:	99 1f       	adc	r25, r25
 f88:	5a 95       	dec	r21
 f8a:	a9 f7       	brne	.-22     	; 0xf76 <__udivmodhi4_loop>
 f8c:	80 95       	com	r24
 f8e:	90 95       	com	r25
 f90:	bc 01       	movw	r22, r24
 f92:	cd 01       	movw	r24, r26
 f94:	08 95       	ret

00000f96 <_exit>:
 f96:	ff cf       	rjmp	.-2      	; 0xf96 <_exit>
